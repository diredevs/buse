0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node',
1 verbose cli   '/usr/local/bin/npm',
1 verbose cli   'install',
1 verbose cli   'jscoverage',
1 verbose cli   '-g' ]
2 info using npm@1.3.14
3 info using node@v0.10.22
4 verbose cache add [ 'jscoverage', null ]
5 verbose cache add name=undefined spec="jscoverage" args=["jscoverage",null]
6 verbose parsed url { protocol: null,
6 verbose parsed url   slashes: null,
6 verbose parsed url   auth: null,
6 verbose parsed url   host: null,
6 verbose parsed url   port: null,
6 verbose parsed url   hostname: null,
6 verbose parsed url   hash: null,
6 verbose parsed url   search: null,
6 verbose parsed url   query: null,
6 verbose parsed url   pathname: 'jscoverage',
6 verbose parsed url   path: 'jscoverage',
6 verbose parsed url   href: 'jscoverage' }
7 silly lockFile f5868da4-jscoverage jscoverage
8 verbose lock jscoverage /home/roger/.npm/f5868da4-jscoverage.lock
9 silly lockFile f5868da4-jscoverage jscoverage
10 silly lockFile f5868da4-jscoverage jscoverage
11 verbose addNamed [ 'jscoverage', '' ]
12 verbose addNamed [ null, '*' ]
13 silly lockFile c7e02802-jscoverage jscoverage@
14 verbose lock jscoverage@ /home/roger/.npm/c7e02802-jscoverage.lock
15 silly addNameRange { name: 'jscoverage', range: '*', hasData: false }
16 verbose url raw jscoverage
17 verbose url resolving [ 'https://registry.npmjs.org/', './jscoverage' ]
18 verbose url resolved https://registry.npmjs.org/jscoverage
19 info trying registry request attempt 1 at 04:38:09
20 verbose etag "1M8VKV3YG59FH8Q3AQHYNGXEP"
21 http GET https://registry.npmjs.org/jscoverage
22 http 304 https://registry.npmjs.org/jscoverage
23 silly registry.get cb [ 304,
23 silly registry.get   { server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
23 silly registry.get     etag: '"1M8VKV3YG59FH8Q3AQHYNGXEP"',
23 silly registry.get     date: 'Wed, 27 Nov 2013 07:38:10 GMT',
23 silly registry.get     'content-length': '0' } ]
24 verbose etag jscoverage from cache
25 silly addNameRange number 2 { name: 'jscoverage', range: '*', hasData: true }
26 silly addNameRange versions [ 'jscoverage',
26 silly addNameRange   [ '0.0.1',
26 silly addNameRange     '0.0.2',
26 silly addNameRange     '0.0.3',
26 silly addNameRange     '0.0.4',
26 silly addNameRange     '0.0.5',
26 silly addNameRange     '0.0.6',
26 silly addNameRange     '0.0.7',
26 silly addNameRange     '0.0.8',
26 silly addNameRange     '0.0.9',
26 silly addNameRange     '0.1.0',
26 silly addNameRange     '0.1.1',
26 silly addNameRange     '0.1.2',
26 silly addNameRange     '0.1.3',
26 silly addNameRange     '0.1.4',
26 silly addNameRange     '0.1.5',
26 silly addNameRange     '0.1.7',
26 silly addNameRange     '0.1.9',
26 silly addNameRange     '0.1.10',
26 silly addNameRange     '0.2.0',
26 silly addNameRange     '0.2.1',
26 silly addNameRange     '0.2.2',
26 silly addNameRange     '0.2.3',
26 silly addNameRange     '0.2.4',
26 silly addNameRange     '0.2.5',
26 silly addNameRange     '0.3.0-alpha1',
26 silly addNameRange     '0.3.0-beta',
26 silly addNameRange     '0.3.0-beta1',
26 silly addNameRange     '0.3.0-beta2',
26 silly addNameRange     '0.3.0-beta3',
26 silly addNameRange     '0.3.0',
26 silly addNameRange     '0.3.1',
26 silly addNameRange     '0.3.2',
26 silly addNameRange     '0.3.3',
26 silly addNameRange     '0.3.4',
26 silly addNameRange     '0.3.5',
26 silly addNameRange     '0.3.6-pre',
26 silly addNameRange     '0.3.6',
26 silly addNameRange     '0.3.7',
26 silly addNameRange     '0.3.8' ] ]
27 verbose addNamed [ 'jscoverage', '0.3.8' ]
28 verbose addNamed [ '0.3.8', '0.3.8' ]
29 silly lockFile 069b400e-jscoverage-0-3-8 jscoverage@0.3.8
30 verbose lock jscoverage@0.3.8 /home/roger/.npm/069b400e-jscoverage-0-3-8.lock
31 silly lockFile 069b400e-jscoverage-0-3-8 jscoverage@0.3.8
32 silly lockFile 069b400e-jscoverage-0-3-8 jscoverage@0.3.8
33 silly lockFile c7e02802-jscoverage jscoverage@
34 silly lockFile c7e02802-jscoverage jscoverage@
35 silly resolved [ { name: 'jscoverage',
35 silly resolved     version: '0.3.8',
35 silly resolved     description: 'a javascript coverage tool, can be used in node dev, and browser side js dev',
35 silly resolved     main: 'index.js',
35 silly resolved     bin: { jscoverage: './bin/jscoverage' },
35 silly resolved     scripts: { test: 'mocha test/test.js' },
35 silly resolved     engines: { node: '>=0.8' },
35 silly resolved     dependencies: { 'uglify-js': '1.3.4', optimist: '0.3.1' },
35 silly resolved     devDependencies: { mocha: '*', 'expect.js': '*', xfs: '*' },
35 silly resolved     repository: { type: 'git', url: 'git://github.com/fishbar/jscoverage.git' },
35 silly resolved     keywords: [ 'jscoverage', 'node', 'javascript', 'coverage', 'dev', 'tool' ],
35 silly resolved     author: { name: 'fish', email: 'zhengxinlin@gmail.com' },
35 silly resolved     contributors: [ [Object] ],
35 silly resolved     license: 'MIT',
35 silly resolved     readme: 'jscoverage\n==========\njscoverage tool, both node or javascript support\n\n### install \n  \n    npm install jscoverage -g\n\n### get source code\n    git clone git://github.com/fishbar/jscoverage.git\n    cd ./jscoverage\n    mocha -R list test --coverage\n\n### using as cli command\n```shell\njscoverage\n# print help info\njscoverage source.js\n# convert source.js to source-cov.js\njscoverage source.js dest.js\n# convert source.js to dest.js\njscoverage sourcedir destdir --exclude a.js,b.js,c.js\n# convert all files in sourcedir to destdir, exclude list will be ignored\n```\nTODO, comming soon\n```sh\njscoverage sourcedir destdir --no-instrument\n```\n\n### using as node module\n\n```js\nvar jsc = require(\'jscoverage\');\nvar abc = jsc.require(module, \'testmodule.js\');\ndescribe(\'test\', function () {\n    // TEST CODE HERE\n});\n```\n==== or =====\n```js\nvar jsc = require(\'jscoverage\');\nrequire = jsc.mock(mo);\nvar abc = require(\'abc.js\', true);\ndescribe(\'test\', function () {\n    // TEST CODE HERE\n});\n```\n### env switchs\n\njscoverage do not process coverage by default,\nbecause when we writting test case in the begining, case always fail,\nand we need to fix problems by check the error stack, finding the exact line where error happened\n\nusing follow options, you can switch the functions\n\n    --coverage   enable coverage action, default nocoverage\n    --noinject   close inject action, default inject , sometimes you already using rewire module do the same thing\n\ni.e when you run test code by mocha:\n```sh\n    mocha test/ --coverage  # open coverage instrument\n    mocha test/ --noinject  # close inject when you are using rewire\n```\nor you can also do in this way:\n```js\nvar jsc = require(\'jscoverage\');\njsc.enableCoverage(true);\njsc.enableInject(false);\n```\n    \n### run with mocha\n\noutput a html coverage reporter \n```sh\nmocha -R html-cov test/test.js --coverage > coverage.html\n```\n\n### print coverage info in cli\n\nyou can just print the coverage info in cli , like this:\n```js\n// add the following code to you test file\nvar jsc = require(\'jscoverage\');\nprocess.on(\'exit\', function () {\n  jsc.coverage(); // print summary info, cover percent\n  jsc.coverageDetail(); // print uncovered lines\n});\n```\n\n### mocha global leaks detect\n\nthe follow object will be detected, all of them are create by jscoverage\n\n    _$jscoverage, _$jscoverage_done, _$jscoverage_init, _$jscoverage_cond\n\n',
35 silly resolved     readmeFilename: 'README.md',
35 silly resolved     bugs: { url: 'https://github.com/fishbar/jscoverage/issues' },
35 silly resolved     homepage: 'https://github.com/fishbar/jscoverage',
35 silly resolved     _id: 'jscoverage@0.3.8',
35 silly resolved     _from: 'jscoverage@' } ]
36 info install jscoverage@0.3.8 into /usr/local/lib
37 info installOne jscoverage@0.3.8
38 info /usr/local/lib/node_modules/jscoverage unbuild
39 verbose tar unpack /home/roger/.npm/jscoverage/0.3.8/package.tgz
40 silly lockFile de9afb23-ocal-lib-node-modules-jscoverage tar:///usr/local/lib/node_modules/jscoverage
41 verbose lock tar:///usr/local/lib/node_modules/jscoverage /home/roger/.npm/de9afb23-ocal-lib-node-modules-jscoverage.lock
42 silly lockFile 07dcb20d-npm-jscoverage-0-3-8-package-tgz tar:///home/roger/.npm/jscoverage/0.3.8/package.tgz
43 verbose lock tar:///home/roger/.npm/jscoverage/0.3.8/package.tgz /home/roger/.npm/07dcb20d-npm-jscoverage-0-3-8-package-tgz.lock
44 silly gunzTarPerm modes [ '755', '644' ]
45 silly gunzTarPerm extractEntry package.json
46 silly gunzTarPerm extractEntry .npmignore
47 silly gunzTarPerm extractEntry README.md
48 silly gunzTarPerm extractEntry LICENSE
49 silly gunzTarPerm extractEntry index.js
50 silly gunzTarPerm extractEntry bin/jscoverage
51 silly gunzTarPerm extractEntry lib/instrument.js
52 silly gunzTarPerm extractEntry lib/jscoverage.js
53 silly gunzTarPerm extractEntry lib/patch.js
54 silly gunzTarPerm extractEntry test/abc.js
55 silly gunzTarPerm extractEntry test/cde.js
56 silly gunzTarPerm extractEntry test/index.js
57 silly gunzTarPerm extractEntry test/test.js
58 silly gunzTarPerm extractEntry test/dir/a1.js
59 silly gunzTarPerm extractEntry test/dir/a/a2
60 silly gunzTarPerm extractEntry test/dir/a/test.md
61 silly lockFile de9afb23-ocal-lib-node-modules-jscoverage tar:///usr/local/lib/node_modules/jscoverage
62 silly lockFile de9afb23-ocal-lib-node-modules-jscoverage tar:///usr/local/lib/node_modules/jscoverage
63 silly lockFile 07dcb20d-npm-jscoverage-0-3-8-package-tgz tar:///home/roger/.npm/jscoverage/0.3.8/package.tgz
64 silly lockFile 07dcb20d-npm-jscoverage-0-3-8-package-tgz tar:///home/roger/.npm/jscoverage/0.3.8/package.tgz
65 info preinstall jscoverage@0.3.8
66 verbose readDependencies using package.json deps
67 verbose readDependencies using package.json deps
68 verbose cache add [ 'uglify-js@1.3.4', null ]
69 verbose cache add name=undefined spec="uglify-js@1.3.4" args=["uglify-js@1.3.4",null]
70 verbose parsed url { protocol: null,
70 verbose parsed url   slashes: null,
70 verbose parsed url   auth: null,
70 verbose parsed url   host: null,
70 verbose parsed url   port: null,
70 verbose parsed url   hostname: null,
70 verbose parsed url   hash: null,
70 verbose parsed url   search: null,
70 verbose parsed url   query: null,
70 verbose parsed url   pathname: 'uglify-js@1.3.4',
70 verbose parsed url   path: 'uglify-js@1.3.4',
70 verbose parsed url   href: 'uglify-js@1.3.4' }
71 verbose cache add name="uglify-js" spec="1.3.4" args=["uglify-js","1.3.4"]
72 verbose parsed url { protocol: null,
72 verbose parsed url   slashes: null,
72 verbose parsed url   auth: null,
72 verbose parsed url   host: null,
72 verbose parsed url   port: null,
72 verbose parsed url   hostname: null,
72 verbose parsed url   hash: null,
72 verbose parsed url   search: null,
72 verbose parsed url   query: null,
72 verbose parsed url   pathname: '1.3.4',
72 verbose parsed url   path: '1.3.4',
72 verbose parsed url   href: '1.3.4' }
73 verbose addNamed [ 'uglify-js', '1.3.4' ]
74 verbose addNamed [ '1.3.4', '1.3.4' ]
75 silly lockFile 8c7fac75-uglify-js-1-3-4 uglify-js@1.3.4
76 verbose lock uglify-js@1.3.4 /home/roger/.npm/8c7fac75-uglify-js-1-3-4.lock
77 verbose cache add [ 'optimist@0.3.1', null ]
78 verbose cache add name=undefined spec="optimist@0.3.1" args=["optimist@0.3.1",null]
79 verbose parsed url { protocol: null,
79 verbose parsed url   slashes: null,
79 verbose parsed url   auth: null,
79 verbose parsed url   host: null,
79 verbose parsed url   port: null,
79 verbose parsed url   hostname: null,
79 verbose parsed url   hash: null,
79 verbose parsed url   search: null,
79 verbose parsed url   query: null,
79 verbose parsed url   pathname: 'optimist@0.3.1',
79 verbose parsed url   path: 'optimist@0.3.1',
79 verbose parsed url   href: 'optimist@0.3.1' }
80 verbose cache add name="optimist" spec="0.3.1" args=["optimist","0.3.1"]
81 verbose parsed url { protocol: null,
81 verbose parsed url   slashes: null,
81 verbose parsed url   auth: null,
81 verbose parsed url   host: null,
81 verbose parsed url   port: null,
81 verbose parsed url   hostname: null,
81 verbose parsed url   hash: null,
81 verbose parsed url   search: null,
81 verbose parsed url   query: null,
81 verbose parsed url   pathname: '0.3.1',
81 verbose parsed url   path: '0.3.1',
81 verbose parsed url   href: '0.3.1' }
82 verbose addNamed [ 'optimist', '0.3.1' ]
83 verbose addNamed [ '0.3.1', '0.3.1' ]
84 silly lockFile fb6f1e93-optimist-0-3-1 optimist@0.3.1
85 verbose lock optimist@0.3.1 /home/roger/.npm/fb6f1e93-optimist-0-3-1.lock
86 verbose url raw uglify-js/1.3.4
87 verbose url resolving [ 'https://registry.npmjs.org/', './uglify-js/1.3.4' ]
88 verbose url resolved https://registry.npmjs.org/uglify-js/1.3.4
89 info trying registry request attempt 1 at 04:38:50
90 http GET https://registry.npmjs.org/uglify-js/1.3.4
91 verbose url raw optimist/0.3.1
92 verbose url resolving [ 'https://registry.npmjs.org/', './optimist/0.3.1' ]
93 verbose url resolved https://registry.npmjs.org/optimist/0.3.1
94 info trying registry request attempt 1 at 04:38:50
95 http GET https://registry.npmjs.org/optimist/0.3.1
96 http 200 https://registry.npmjs.org/uglify-js/1.3.4
97 silly registry.get cb [ 200,
97 silly registry.get   { vary: 'Accept',
97 silly registry.get     server: 'CouchDB/1.3.1 (Erlang OTP/R15B03)',
97 silly registry.get     etag: '"DVN0LHE0UCIEK0D6JWKO7ZX07"',
97 silly registry.get     date: 'Wed, 27 Nov 2013 07:38:50 GMT',
97 silly registry.get     'content-type': 'application/json',
97 silly registry.get     'content-length': '43457' } ]
98 silly lockFile 3a3a2de9-rg-uglify-js-uglify-js-1-3-4-tgz https://registry.npmjs.org/uglify-js/-/uglify-js-1.3.4.tgz
99 verbose lock https://registry.npmjs.org/uglify-js/-/uglify-js-1.3.4.tgz /home/roger/.npm/3a3a2de9-rg-uglify-js-uglify-js-1-3-4-tgz.lock
100 verbose addRemoteTarball [ 'https://registry.npmjs.org/uglify-js/-/uglify-js-1.3.4.tgz',
100 verbose addRemoteTarball   '282cec40db568798e0ec6d71d0c989d323f0636b' ]
101 info retry fetch attempt 1 at 04:38:51
102 verbose fetch to= /home/roger/tmp/npm-17276-9us1ou2q/1385537931180-0.3103737896308303/tmp.tgz
103 http GET https://registry.npmjs.org/uglify-js/-/uglify-js-1.3.4.tgz
104 http 200 https://registry.npmjs.org/uglify-js/-/uglify-js-1.3.4.tgz
105 verbose tar unpack /home/roger/tmp/npm-17276-9us1ou2q/1385537931180-0.3103737896308303/tmp.tgz
106 silly lockFile 195ca15c-31180-0-3103737896308303-package tar:///home/roger/tmp/npm-17276-9us1ou2q/1385537931180-0.3103737896308303/package
107 verbose lock tar:///home/roger/tmp/npm-17276-9us1ou2q/1385537931180-0.3103737896308303/package /home/roger/.npm/195ca15c-31180-0-3103737896308303-package.lock
108 silly lockFile 6891b146-31180-0-3103737896308303-tmp-tgz tar:///home/roger/tmp/npm-17276-9us1ou2q/1385537931180-0.3103737896308303/tmp.tgz
109 verbose lock tar:///home/roger/tmp/npm-17276-9us1ou2q/1385537931180-0.3103737896308303/tmp.tgz /home/roger/.npm/6891b146-31180-0-3103737896308303-tmp-tgz.lock
110 silly gunzTarPerm modes [ '755', '644' ]
111 silly gunzTarPerm extractEntry package.json
112 silly gunzTarPerm extractEntry .npmignore
113 silly gunzTarPerm extractEntry uglify-js.js
114 silly gunzTarPerm extractEntry bin/uglifyjs
115 silly gunzTarPerm extractEntry README.html
116 silly gunzTarPerm extractEntry tmp/test.js
117 silly gunzTarPerm extractEntry tmp/instrument.js
118 silly gunzTarPerm extractEntry tmp/hoist.js
119 silly gunzTarPerm extractEntry test/testparser.js
120 silly gunzTarPerm extractEntry test/testconsolidator.js
121 silly gunzTarPerm extractEntry test/beautify.js
122 silly gunzTarPerm extractEntry test/unit/scripts.js
123 silly gunzTarPerm extractEntry test/unit/compress/expected/array1.js
124 silly gunzTarPerm extractEntry test/unit/compress/expected/issue278.js
125 silly gunzTarPerm extractEntry test/unit/compress/expected/issue14.js
126 silly gunzTarPerm extractEntry test/unit/compress/expected/const.js
127 silly gunzTarPerm extractEntry test/unit/compress/expected/div-with-regexp.js
128 silly gunzTarPerm extractEntry test/unit/compress/expected/if-not.js
129 silly gunzTarPerm extractEntry test/unit/compress/expected/ifreturn.js
130 silly gunzTarPerm extractEntry test/unit/compress/expected/issue20.js
131 silly gunzTarPerm extractEntry test/unit/compress/expected/issue16.js
132 silly gunzTarPerm extractEntry test/unit/compress/expected/issue53.js
133 silly gunzTarPerm extractEntry test/unit/compress/expected/issue48.js
134 silly gunzTarPerm extractEntry test/unit/compress/expected/mangle.js
135 silly gunzTarPerm extractEntry test/unit/compress/expected/array2.js
136 silly gunzTarPerm extractEntry test/unit/compress/expected/issue27.js
137 silly gunzTarPerm extractEntry test/unit/compress/expected/whitespace.js
138 silly gunzTarPerm extractEntry test/unit/compress/expected/issue349.js
139 silly gunzTarPerm extractEntry test/unit/compress/expected/issue30.js
140 silly gunzTarPerm extractEntry test/unit/compress/expected/issue28.js
141 silly gunzTarPerm extractEntry test/unit/compress/expected/issue4.js
142 silly gunzTarPerm extractEntry test/unit/compress/expected/assignment.js
143 silly gunzTarPerm extractEntry test/unit/compress/expected/issue54.1.js
144 silly gunzTarPerm extractEntry test/unit/compress/expected/infinite.js
145 silly gunzTarPerm extractEntry test/unit/compress/expected/var.js
146 silly gunzTarPerm extractEntry test/unit/compress/expected/issue13.js
147 silly gunzTarPerm extractEntry test/unit/compress/expected/issue10.js
148 silly gunzTarPerm extractEntry test/unit/compress/expected/issue372.js
149 silly gunzTarPerm extractEntry test/unit/compress/expected/issue34.js
150 silly gunzTarPerm extractEntry test/unit/compress/expected/concatstring.js
151 silly gunzTarPerm extractEntry test/unit/compress/expected/issue68.js
152 silly gunzTarPerm extractEntry test/unit/compress/expected/issue17.js
153 silly gunzTarPerm extractEntry test/unit/compress/expected/ifreturn2.js
154 silly gunzTarPerm extractEntry test/unit/compress/expected/array3.js
155 silly gunzTarPerm extractEntry test/unit/compress/expected/issue25.js
156 silly gunzTarPerm extractEntry test/unit/compress/expected/1e21.js
157 silly gunzTarPerm extractEntry test/unit/compress/expected/issue29.js
158 silly gunzTarPerm extractEntry test/unit/compress/expected/if.js
159 silly gunzTarPerm extractEntry test/unit/compress/expected/issue9.js
160 silly gunzTarPerm extractEntry test/unit/compress/expected/empty-blocks.js
161 silly gunzTarPerm extractEntry test/unit/compress/expected/issues222_324.js
162 silly gunzTarPerm extractEntry test/unit/compress/expected/issue69.js
163 silly gunzTarPerm extractEntry test/unit/compress/expected/array4.js
164 silly gunzTarPerm extractEntry test/unit/compress/expected/issue21.js
165 silly gunzTarPerm extractEntry test/unit/compress/expected/issue353.js
166 silly gunzTarPerm extractEntry test/unit/compress/expected/null_string.js
167 silly gunzTarPerm extractEntry test/unit/compress/expected/with.js
168 silly gunzTarPerm extractEntry test/unit/compress/expected/strict-equals.js
169 silly gunzTarPerm extractEntry test/unit/compress/expected/issue11.js
170 silly gunzTarPerm extractEntry test/unit/compress/expected/forstatement.js
171 silly gunzTarPerm extractEntry test/unit/compress/expected/issue50.js
172 silly gunzTarPerm extractEntry test/unit/compress/test/array1.js
173 silly gunzTarPerm extractEntry test/unit/compress/test/issue278.js
174 silly gunzTarPerm extractEntry test/unit/compress/test/issue14.js
175 silly gunzTarPerm extractEntry test/unit/compress/test/const.js
176 silly gunzTarPerm extractEntry test/unit/compress/test/div-with-regexp.js
177 silly gunzTarPerm extractEntry test/unit/compress/test/if-not.js
178 silly gunzTarPerm extractEntry test/unit/compress/test/ifreturn.js
179 silly gunzTarPerm extractEntry test/unit/compress/test/issue20.js
180 silly gunzTarPerm extractEntry test/unit/compress/test/issue16.js
181 silly gunzTarPerm extractEntry test/unit/compress/test/issue53.js
182 silly gunzTarPerm extractEntry test/unit/compress/test/issue48.js
183 silly gunzTarPerm extractEntry test/unit/compress/test/mangle.js
184 silly gunzTarPerm extractEntry test/unit/compress/test/array2.js
185 silly gunzTarPerm extractEntry test/unit/compress/test/issue27.js
186 silly gunzTarPerm extractEntry test/unit/compress/test/whitespace.js
187 silly gunzTarPerm extractEntry test/unit/compress/test/issue349.js
188 silly gunzTarPerm extractEntry test/unit/compress/test/issue30.js
189 silly gunzTarPerm extractEntry test/unit/compress/test/issue28.js
190 silly gunzTarPerm extractEntry test/unit/compress/test/issue4.js
191 silly gunzTarPerm extractEntry test/unit/compress/test/assignment.js
192 silly gunzTarPerm extractEntry test/unit/compress/test/issue54.1.js
193 silly gunzTarPerm extractEntry test/unit/compress/test/infinite.js
194 silly gunzTarPerm extractEntry test/unit/compress/test/var.js
195 silly gunzTarPerm extractEntry test/unit/compress/test/issue13.js
196 silly gunzTarPerm extractEntry test/unit/compress/test/issue10.js
197 silly gunzTarPerm extractEntry test/unit/compress/test/issue372.js
198 silly gunzTarPerm extractEntry test/unit/compress/test/issue34.js
199 silly gunzTarPerm extractEntry test/unit/compress/test/concatstring.js
200 silly gunzTarPerm extractEntry test/unit/compress/test/issue68.js
201 silly gunzTarPerm extractEntry test/unit/compress/test/issue17.js
202 silly gunzTarPerm extractEntry test/unit/compress/test/ifreturn2.js
203 silly gunzTarPerm extractEntry test/unit/compress/test/array3.js
204 silly gunzTarPerm extractEntry test/unit/compress/test/issue25.js
205 silly gunzTarPerm extractEntry test/unit/compress/test/1e21.js
206 silly gunzTarPerm extractEntry test/unit/compress/test/issue29.js
207 silly gunzTarPerm extractEntry test/unit/compress/test/if.js
208 silly gunzTarPerm extractEntry test/unit/compress/test/issue9.js
209 silly gunzTarPerm extractEntry test/unit/compress/test/empty-blocks.js
210 silly gunzTarPerm extractEntry test/unit/compress/test/issues222_324.js
211 silly gunzTarPerm extractEntry test/unit/compress/test/issue69.js
212 silly gunzTarPerm extractEntry test/unit/compress/test/array4.js
213 silly gunzTarPerm extractEntry test/unit/compress/test/issue21.js
214 silly gunzTarPerm extractEntry test/unit/compress/test/issue353.js
215 silly gunzTarPerm extractEntry test/unit/compress/test/null_string.js
216 silly gunzTarPerm extractEntry test/unit/compress/test/with.js
217 silly gunzTarPerm extractEntry test/unit/compress/test/strict-equals.js
218 silly gunzTarPerm extractEntry test/unit/compress/test/issue11.js
219 silly gunzTarPerm extractEntry test/unit/compress/test/forstatement.js
220 silly gunzTarPerm extractEntry test/unit/compress/test/issue50.js
221 silly gunzTarPerm extractEntry lib/process.js
222 silly gunzTarPerm extractEntry lib/parse-js.js
223 silly gunzTarPerm extractEntry lib/squeeze-more.js
224 silly gunzTarPerm extractEntry lib/consolidator.js
225 silly gunzTarPerm extractEntry README.org
226 silly gunzTarPerm extractEntry docstyle.css
227 silly lockFile 195ca15c-31180-0-3103737896308303-package tar:///home/roger/tmp/npm-17276-9us1ou2q/1385537931180-0.3103737896308303/package
228 silly lockFile 195ca15c-31180-0-3103737896308303-package tar:///home/roger/tmp/npm-17276-9us1ou2q/1385537931180-0.3103737896308303/package
229 silly lockFile 6891b146-31180-0-3103737896308303-tmp-tgz tar:///home/roger/tmp/npm-17276-9us1ou2q/1385537931180-0.3103737896308303/tmp.tgz
230 silly lockFile 6891b146-31180-0-3103737896308303-tmp-tgz tar:///home/roger/tmp/npm-17276-9us1ou2q/1385537931180-0.3103737896308303/tmp.tgz
231 verbose tar pack [ '/home/roger/.npm/uglify-js/1.3.4/package.tgz',
231 verbose tar pack   '/home/roger/tmp/npm-17276-9us1ou2q/1385537931180-0.3103737896308303/package' ]
232 verbose tarball /home/roger/.npm/uglify-js/1.3.4/package.tgz
233 verbose folder /home/roger/tmp/npm-17276-9us1ou2q/1385537931180-0.3103737896308303/package
234 silly lockFile 195ca15c-31180-0-3103737896308303-package tar:///home/roger/tmp/npm-17276-9us1ou2q/1385537931180-0.3103737896308303/package
235 verbose lock tar:///home/roger/tmp/npm-17276-9us1ou2q/1385537931180-0.3103737896308303/package /home/roger/.npm/195ca15c-31180-0-3103737896308303-package.lock
236 silly lockFile f4139750--npm-uglify-js-1-3-4-package-tgz tar:///home/roger/.npm/uglify-js/1.3.4/package.tgz
237 verbose lock tar:///home/roger/.npm/uglify-js/1.3.4/package.tgz /home/roger/.npm/f4139750--npm-uglify-js-1-3-4-package-tgz.lock
238 silly lockFile 195ca15c-31180-0-3103737896308303-package tar:///home/roger/tmp/npm-17276-9us1ou2q/1385537931180-0.3103737896308303/package
239 silly lockFile 195ca15c-31180-0-3103737896308303-package tar:///home/roger/tmp/npm-17276-9us1ou2q/1385537931180-0.3103737896308303/package
240 silly lockFile f4139750--npm-uglify-js-1-3-4-package-tgz tar:///home/roger/.npm/uglify-js/1.3.4/package.tgz
241 silly lockFile f4139750--npm-uglify-js-1-3-4-package-tgz tar:///home/roger/.npm/uglify-js/1.3.4/package.tgz
242 silly lockFile a3cf70e8-oger-npm-uglify-js-1-3-4-package /home/roger/.npm/uglify-js/1.3.4/package
243 verbose lock /home/roger/.npm/uglify-js/1.3.4/package /home/roger/.npm/a3cf70e8-oger-npm-uglify-js-1-3-4-package.lock
244 silly lockFile a3cf70e8-oger-npm-uglify-js-1-3-4-package /home/roger/.npm/uglify-js/1.3.4/package
245 silly lockFile a3cf70e8-oger-npm-uglify-js-1-3-4-package /home/roger/.npm/uglify-js/1.3.4/package
246 verbose tar unpack /home/roger/.npm/uglify-js/1.3.4/package.tgz
247 silly lockFile a3845f42-oger-npm-uglify-js-1-3-4-package tar:///home/roger/.npm/uglify-js/1.3.4/package
248 verbose lock tar:///home/roger/.npm/uglify-js/1.3.4/package /home/roger/.npm/a3845f42-oger-npm-uglify-js-1-3-4-package.lock
249 silly lockFile f4139750--npm-uglify-js-1-3-4-package-tgz tar:///home/roger/.npm/uglify-js/1.3.4/package.tgz
250 verbose lock tar:///home/roger/.npm/uglify-js/1.3.4/package.tgz /home/roger/.npm/f4139750--npm-uglify-js-1-3-4-package-tgz.lock
251 silly gunzTarPerm modes [ '755', '644' ]
252 silly gunzTarPerm extractEntry package.json
253 silly gunzTarPerm extractEntry .npmignore
254 silly gunzTarPerm extractEntry uglify-js.js
255 silly gunzTarPerm extractEntry README.html
256 silly gunzTarPerm extractEntry README.org
257 silly gunzTarPerm extractEntry bin/uglifyjs
258 silly gunzTarPerm extractEntry docstyle.css
259 silly gunzTarPerm extractEntry lib/consolidator.js
260 silly gunzTarPerm extractEntry lib/parse-js.js
261 silly gunzTarPerm extractEntry lib/process.js
262 silly gunzTarPerm extractEntry lib/squeeze-more.js
263 silly gunzTarPerm extractEntry test/beautify.js
264 silly gunzTarPerm extractEntry test/testconsolidator.js
265 silly gunzTarPerm extractEntry test/testparser.js
266 silly gunzTarPerm extractEntry test/unit/scripts.js
267 silly gunzTarPerm extractEntry test/unit/compress/expected/1e21.js
268 silly gunzTarPerm extractEntry test/unit/compress/expected/issue17.js
269 silly gunzTarPerm extractEntry test/unit/compress/expected/issue20.js
270 silly gunzTarPerm extractEntry test/unit/compress/expected/issue21.js
271 silly gunzTarPerm extractEntry test/unit/compress/expected/issue16.js
272 silly gunzTarPerm extractEntry test/unit/compress/expected/issue27.js
273 silly gunzTarPerm extractEntry test/unit/compress/expected/issue278.js
274 silly gunzTarPerm extractEntry test/unit/compress/expected/issue28.js
275 silly gunzTarPerm extractEntry test/unit/compress/expected/issue29.js
276 silly gunzTarPerm extractEntry test/unit/compress/expected/issue30.js
277 silly gunzTarPerm extractEntry test/unit/compress/expected/issue14.js
278 silly gunzTarPerm extractEntry test/unit/compress/expected/issue34.js
279 silly gunzTarPerm extractEntry test/unit/compress/expected/issue13.js
280 silly gunzTarPerm extractEntry test/unit/compress/expected/issue349.js
281 silly gunzTarPerm extractEntry test/unit/compress/expected/issue11.js
282 silly gunzTarPerm extractEntry test/unit/compress/expected/issue353.js
283 silly gunzTarPerm extractEntry test/unit/compress/expected/issue10.js
284 silly gunzTarPerm extractEntry test/unit/compress/expected/issue372.js
285 silly gunzTarPerm extractEntry test/unit/compress/expected/infinite.js
286 silly gunzTarPerm extractEntry test/unit/compress/expected/issue4.js
287 silly gunzTarPerm extractEntry test/unit/compress/expected/ifreturn2.js
288 silly gunzTarPerm extractEntry test/unit/compress/expected/issue48.js
289 silly gunzTarPerm extractEntry test/unit/compress/expected/ifreturn.js
290 silly gunzTarPerm extractEntry test/unit/compress/expected/issue50.js
291 silly gunzTarPerm extractEntry test/unit/compress/expected/if.js
292 silly gunzTarPerm extractEntry test/unit/compress/expected/issue53.js
293 silly gunzTarPerm extractEntry test/unit/compress/expected/if-not.js
294 silly gunzTarPerm extractEntry test/unit/compress/expected/issue54.1.js
295 silly gunzTarPerm extractEntry test/unit/compress/expected/forstatement.js
296 silly gunzTarPerm extractEntry test/unit/compress/expected/issue68.js
297 silly gunzTarPerm extractEntry test/unit/compress/expected/empty-blocks.js
298 silly gunzTarPerm extractEntry test/unit/compress/expected/issue69.js
299 silly gunzTarPerm extractEntry test/unit/compress/expected/div-with-regexp.js
300 silly gunzTarPerm extractEntry test/unit/compress/expected/issue9.js
301 silly gunzTarPerm extractEntry test/unit/compress/expected/const.js
302 silly gunzTarPerm extractEntry test/unit/compress/expected/issues222_324.js
303 silly gunzTarPerm extractEntry test/unit/compress/expected/concatstring.js
304 silly gunzTarPerm extractEntry test/unit/compress/expected/mangle.js
305 silly gunzTarPerm extractEntry test/unit/compress/expected/assignment.js
306 silly gunzTarPerm extractEntry test/unit/compress/expected/null_string.js
307 silly gunzTarPerm extractEntry test/unit/compress/expected/array4.js
308 silly gunzTarPerm extractEntry test/unit/compress/expected/strict-equals.js
309 silly gunzTarPerm extractEntry test/unit/compress/expected/array3.js
310 silly gunzTarPerm extractEntry test/unit/compress/expected/var.js
311 silly gunzTarPerm extractEntry test/unit/compress/expected/array2.js
312 silly gunzTarPerm extractEntry test/unit/compress/expected/whitespace.js
313 silly gunzTarPerm extractEntry test/unit/compress/expected/array1.js
314 silly gunzTarPerm extractEntry test/unit/compress/expected/with.js
315 silly gunzTarPerm extractEntry test/unit/compress/expected/issue25.js
316 silly gunzTarPerm extractEntry test/unit/compress/test/1e21.js
317 silly gunzTarPerm extractEntry test/unit/compress/test/issue17.js
318 silly gunzTarPerm extractEntry test/unit/compress/test/issue20.js
319 silly gunzTarPerm extractEntry test/unit/compress/test/issue21.js
320 silly gunzTarPerm extractEntry test/unit/compress/test/issue16.js
321 silly gunzTarPerm extractEntry test/unit/compress/test/issue27.js
322 silly gunzTarPerm extractEntry test/unit/compress/test/issue278.js
323 silly gunzTarPerm extractEntry test/unit/compress/test/issue28.js
324 silly gunzTarPerm extractEntry test/unit/compress/test/issue29.js
325 silly gunzTarPerm extractEntry test/unit/compress/test/issue30.js
326 silly gunzTarPerm extractEntry test/unit/compress/test/issue14.js
327 silly gunzTarPerm extractEntry test/unit/compress/test/issue34.js
328 silly gunzTarPerm extractEntry test/unit/compress/test/issue13.js
329 silly gunzTarPerm extractEntry test/unit/compress/test/issue349.js
330 silly gunzTarPerm extractEntry test/unit/compress/test/issue11.js
331 silly gunzTarPerm extractEntry test/unit/compress/test/issue353.js
332 silly gunzTarPerm extractEntry test/unit/compress/test/issue10.js
333 silly gunzTarPerm extractEntry test/unit/compress/test/issue372.js
334 silly gunzTarPerm extractEntry test/unit/compress/test/infinite.js
335 silly gunzTarPerm extractEntry test/unit/compress/test/issue4.js
336 silly gunzTarPerm extractEntry test/unit/compress/test/ifreturn2.js
337 silly gunzTarPerm extractEntry test/unit/compress/test/issue48.js
338 silly gunzTarPerm extractEntry test/unit/compress/test/ifreturn.js
339 silly gunzTarPerm extractEntry test/unit/compress/test/issue50.js
340 silly gunzTarPerm extractEntry test/unit/compress/test/if.js
341 silly gunzTarPerm extractEntry test/unit/compress/test/issue53.js
342 silly gunzTarPerm extractEntry test/unit/compress/test/if-not.js
343 silly gunzTarPerm extractEntry test/unit/compress/test/issue54.1.js
344 silly gunzTarPerm extractEntry test/unit/compress/test/forstatement.js
345 silly gunzTarPerm extractEntry test/unit/compress/test/issue68.js
346 silly gunzTarPerm extractEntry test/unit/compress/test/empty-blocks.js
347 silly gunzTarPerm extractEntry test/unit/compress/test/issue69.js
348 silly gunzTarPerm extractEntry test/unit/compress/test/div-with-regexp.js
349 silly gunzTarPerm extractEntry test/unit/compress/test/issue9.js
350 silly gunzTarPerm extractEntry test/unit/compress/test/const.js
351 silly gunzTarPerm extractEntry test/unit/compress/test/issues222_324.js
352 silly gunzTarPerm extractEntry test/unit/compress/test/concatstring.js
353 silly gunzTarPerm extractEntry test/unit/compress/test/mangle.js
354 silly gunzTarPerm extractEntry test/unit/compress/test/assignment.js
355 silly gunzTarPerm extractEntry test/unit/compress/test/null_string.js
356 silly gunzTarPerm extractEntry test/unit/compress/test/array4.js
357 silly gunzTarPerm extractEntry test/unit/compress/test/strict-equals.js
358 silly gunzTarPerm extractEntry test/unit/compress/test/array3.js
359 silly gunzTarPerm extractEntry test/unit/compress/test/var.js
360 silly gunzTarPerm extractEntry test/unit/compress/test/array2.js
361 silly gunzTarPerm extractEntry test/unit/compress/test/whitespace.js
362 silly gunzTarPerm extractEntry test/unit/compress/test/array1.js
363 silly gunzTarPerm extractEntry test/unit/compress/test/with.js
364 silly gunzTarPerm extractEntry test/unit/compress/test/issue25.js
365 silly gunzTarPerm extractEntry tmp/hoist.js
366 silly gunzTarPerm extractEntry tmp/instrument.js
367 silly gunzTarPerm extractEntry tmp/test.js
368 silly lockFile a3845f42-oger-npm-uglify-js-1-3-4-package tar:///home/roger/.npm/uglify-js/1.3.4/package
369 silly lockFile a3845f42-oger-npm-uglify-js-1-3-4-package tar:///home/roger/.npm/uglify-js/1.3.4/package
370 silly lockFile f4139750--npm-uglify-js-1-3-4-package-tgz tar:///home/roger/.npm/uglify-js/1.3.4/package.tgz
371 silly lockFile f4139750--npm-uglify-js-1-3-4-package-tgz tar:///home/roger/.npm/uglify-js/1.3.4/package.tgz
372 verbose chmod /home/roger/.npm/uglify-js/1.3.4/package.tgz 644
373 verbose chown /home/roger/.npm/uglify-js/1.3.4/package.tgz [ 1000, 1000 ]
374 silly lockFile 3a3a2de9-rg-uglify-js-uglify-js-1-3-4-tgz https://registry.npmjs.org/uglify-js/-/uglify-js-1.3.4.tgz
375 silly lockFile 3a3a2de9-rg-uglify-js-uglify-js-1-3-4-tgz https://registry.npmjs.org/uglify-js/-/uglify-js-1.3.4.tgz
376 silly lockFile 8c7fac75-uglify-js-1-3-4 uglify-js@1.3.4
377 silly lockFile 8c7fac75-uglify-js-1-3-4 uglify-js@1.3.4
378 http 200 https://registry.npmjs.org/optimist/0.3.1
379 silly registry.get cb [ 200,
379 silly registry.get   { vary: 'Accept',
379 silly registry.get     server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
379 silly registry.get     etag: '"5IL3A9FIGT7NJ4U0FAPQJYEJU"',
379 silly registry.get     date: 'Wed, 27 Nov 2013 07:38:56 GMT',
379 silly registry.get     'content-type': 'application/json',
379 silly registry.get     'content-length': '1023' } ]
380 silly lockFile b03ed019--org-optimist-optimist-0-3-1-tgz https://registry.npmjs.org/optimist/-/optimist-0.3.1.tgz
381 verbose lock https://registry.npmjs.org/optimist/-/optimist-0.3.1.tgz /home/roger/.npm/b03ed019--org-optimist-optimist-0-3-1-tgz.lock
382 verbose addRemoteTarball [ 'https://registry.npmjs.org/optimist/-/optimist-0.3.1.tgz',
382 verbose addRemoteTarball   '6680d30560193af5a55eb64394883ed7bcb98f2e' ]
383 info retry fetch attempt 1 at 04:38:55
384 verbose fetch to= /home/roger/tmp/npm-17276-9us1ou2q/1385537935934-0.38420659489929676/tmp.tgz
385 http GET https://registry.npmjs.org/optimist/-/optimist-0.3.1.tgz
386 http 200 https://registry.npmjs.org/optimist/-/optimist-0.3.1.tgz
387 verbose tar unpack /home/roger/tmp/npm-17276-9us1ou2q/1385537935934-0.38420659489929676/tmp.tgz
388 silly lockFile 15c16b0f-5934-0-38420659489929676-package tar:///home/roger/tmp/npm-17276-9us1ou2q/1385537935934-0.38420659489929676/package
389 verbose lock tar:///home/roger/tmp/npm-17276-9us1ou2q/1385537935934-0.38420659489929676/package /home/roger/.npm/15c16b0f-5934-0-38420659489929676-package.lock
390 silly lockFile 66eaa657-5934-0-38420659489929676-tmp-tgz tar:///home/roger/tmp/npm-17276-9us1ou2q/1385537935934-0.38420659489929676/tmp.tgz
391 verbose lock tar:///home/roger/tmp/npm-17276-9us1ou2q/1385537935934-0.38420659489929676/tmp.tgz /home/roger/.npm/66eaa657-5934-0-38420659489929676-tmp-tgz.lock
392 silly gunzTarPerm modes [ '755', '644' ]
393 silly gunzTarPerm extractEntry index.js
394 silly gunzTarPerm extractEntry package.json
395 silly gunzTarPerm extractEntry .npmignore
396 silly gunzTarPerm extractEntry README.markdown
397 silly gunzTarPerm extractEntry LICENSE
398 silly gunzTarPerm extractEntry .gitignore
399 silly gunzTarPerm extractEntry examples/line_count_options.js
400 silly gunzTarPerm extractEntry examples/boolean_single.js
401 silly gunzTarPerm extractEntry examples/short.js
402 silly gunzTarPerm extractEntry examples/string.js
403 silly gunzTarPerm extractEntry examples/boolean_double.js
404 silly gunzTarPerm extractEntry examples/divide.js
405 silly gunzTarPerm extractEntry examples/nonopt.js
406 silly gunzTarPerm extractEntry examples/line_count.js
407 silly gunzTarPerm extractEntry examples/default_hash.js
408 silly gunzTarPerm extractEntry examples/reflect.js
409 silly gunzTarPerm extractEntry examples/default_singles.js
410 silly gunzTarPerm extractEntry examples/usage-options.js
411 silly gunzTarPerm extractEntry examples/bool.js
412 silly gunzTarPerm extractEntry examples/xup.js
413 silly gunzTarPerm extractEntry examples/line_count_wrap.js
414 silly gunzTarPerm extractEntry test/parse.js
415 silly gunzTarPerm extractEntry test/_.js
416 silly gunzTarPerm extractEntry test/usage.js
417 silly gunzTarPerm extractEntry test/_/bin.js
418 silly gunzTarPerm extractEntry test/_/argv.js
419 silly lockFile 15c16b0f-5934-0-38420659489929676-package tar:///home/roger/tmp/npm-17276-9us1ou2q/1385537935934-0.38420659489929676/package
420 silly lockFile 15c16b0f-5934-0-38420659489929676-package tar:///home/roger/tmp/npm-17276-9us1ou2q/1385537935934-0.38420659489929676/package
421 silly lockFile 66eaa657-5934-0-38420659489929676-tmp-tgz tar:///home/roger/tmp/npm-17276-9us1ou2q/1385537935934-0.38420659489929676/tmp.tgz
422 silly lockFile 66eaa657-5934-0-38420659489929676-tmp-tgz tar:///home/roger/tmp/npm-17276-9us1ou2q/1385537935934-0.38420659489929676/tmp.tgz
423 verbose tar pack [ '/home/roger/.npm/optimist/0.3.1/package.tgz',
423 verbose tar pack   '/home/roger/tmp/npm-17276-9us1ou2q/1385537935934-0.38420659489929676/package' ]
424 verbose tarball /home/roger/.npm/optimist/0.3.1/package.tgz
425 verbose folder /home/roger/tmp/npm-17276-9us1ou2q/1385537935934-0.38420659489929676/package
426 silly lockFile 15c16b0f-5934-0-38420659489929676-package tar:///home/roger/tmp/npm-17276-9us1ou2q/1385537935934-0.38420659489929676/package
427 verbose lock tar:///home/roger/tmp/npm-17276-9us1ou2q/1385537935934-0.38420659489929676/package /home/roger/.npm/15c16b0f-5934-0-38420659489929676-package.lock
428 silly lockFile e28b3cfe-r-npm-optimist-0-3-1-package-tgz tar:///home/roger/.npm/optimist/0.3.1/package.tgz
429 verbose lock tar:///home/roger/.npm/optimist/0.3.1/package.tgz /home/roger/.npm/e28b3cfe-r-npm-optimist-0-3-1-package-tgz.lock
430 silly lockFile 15c16b0f-5934-0-38420659489929676-package tar:///home/roger/tmp/npm-17276-9us1ou2q/1385537935934-0.38420659489929676/package
431 silly lockFile 15c16b0f-5934-0-38420659489929676-package tar:///home/roger/tmp/npm-17276-9us1ou2q/1385537935934-0.38420659489929676/package
432 silly lockFile e28b3cfe-r-npm-optimist-0-3-1-package-tgz tar:///home/roger/.npm/optimist/0.3.1/package.tgz
433 silly lockFile e28b3cfe-r-npm-optimist-0-3-1-package-tgz tar:///home/roger/.npm/optimist/0.3.1/package.tgz
434 silly lockFile 68167724-roger-npm-optimist-0-3-1-package /home/roger/.npm/optimist/0.3.1/package
435 verbose lock /home/roger/.npm/optimist/0.3.1/package /home/roger/.npm/68167724-roger-npm-optimist-0-3-1-package.lock
436 silly lockFile 68167724-roger-npm-optimist-0-3-1-package /home/roger/.npm/optimist/0.3.1/package
437 silly lockFile 68167724-roger-npm-optimist-0-3-1-package /home/roger/.npm/optimist/0.3.1/package
438 verbose tar unpack /home/roger/.npm/optimist/0.3.1/package.tgz
439 silly lockFile c3b63ae2-roger-npm-optimist-0-3-1-package tar:///home/roger/.npm/optimist/0.3.1/package
440 verbose lock tar:///home/roger/.npm/optimist/0.3.1/package /home/roger/.npm/c3b63ae2-roger-npm-optimist-0-3-1-package.lock
441 silly lockFile e28b3cfe-r-npm-optimist-0-3-1-package-tgz tar:///home/roger/.npm/optimist/0.3.1/package.tgz
442 verbose lock tar:///home/roger/.npm/optimist/0.3.1/package.tgz /home/roger/.npm/e28b3cfe-r-npm-optimist-0-3-1-package-tgz.lock
443 silly gunzTarPerm modes [ '755', '644' ]
444 silly gunzTarPerm extractEntry package.json
445 silly gunzTarPerm extractEntry .npmignore
446 silly gunzTarPerm extractEntry LICENSE
447 silly gunzTarPerm extractEntry index.js
448 silly gunzTarPerm extractEntry README.markdown
449 silly gunzTarPerm extractEntry examples/bool.js
450 silly gunzTarPerm extractEntry examples/default_singles.js
451 silly gunzTarPerm extractEntry examples/divide.js
452 silly gunzTarPerm extractEntry examples/line_count.js
453 silly gunzTarPerm extractEntry examples/default_hash.js
454 silly gunzTarPerm extractEntry examples/line_count_wrap.js
455 silly gunzTarPerm extractEntry examples/nonopt.js
456 silly gunzTarPerm extractEntry examples/reflect.js
457 silly gunzTarPerm extractEntry examples/short.js
458 silly gunzTarPerm extractEntry examples/string.js
459 silly gunzTarPerm extractEntry examples/boolean_single.js
460 silly gunzTarPerm extractEntry examples/usage-options.js
461 silly gunzTarPerm extractEntry examples/boolean_double.js
462 silly gunzTarPerm extractEntry examples/xup.js
463 silly gunzTarPerm extractEntry examples/line_count_options.js
464 silly gunzTarPerm extractEntry test/_.js
465 silly gunzTarPerm extractEntry test/parse.js
466 silly gunzTarPerm extractEntry test/usage.js
467 silly gunzTarPerm extractEntry test/_/argv.js
468 silly gunzTarPerm extractEntry test/_/bin.js
469 silly lockFile c3b63ae2-roger-npm-optimist-0-3-1-package tar:///home/roger/.npm/optimist/0.3.1/package
470 silly lockFile c3b63ae2-roger-npm-optimist-0-3-1-package tar:///home/roger/.npm/optimist/0.3.1/package
471 silly lockFile e28b3cfe-r-npm-optimist-0-3-1-package-tgz tar:///home/roger/.npm/optimist/0.3.1/package.tgz
472 silly lockFile e28b3cfe-r-npm-optimist-0-3-1-package-tgz tar:///home/roger/.npm/optimist/0.3.1/package.tgz
473 verbose chmod /home/roger/.npm/optimist/0.3.1/package.tgz 644
474 verbose chown /home/roger/.npm/optimist/0.3.1/package.tgz [ 1000, 1000 ]
475 silly lockFile b03ed019--org-optimist-optimist-0-3-1-tgz https://registry.npmjs.org/optimist/-/optimist-0.3.1.tgz
476 silly lockFile b03ed019--org-optimist-optimist-0-3-1-tgz https://registry.npmjs.org/optimist/-/optimist-0.3.1.tgz
477 silly lockFile fb6f1e93-optimist-0-3-1 optimist@0.3.1
478 silly lockFile fb6f1e93-optimist-0-3-1 optimist@0.3.1
479 silly resolved [ { name: 'uglify-js',
479 silly resolved     description: 'JavaScript parser and compressor/beautifier toolkit',
479 silly resolved     author:
479 silly resolved      { name: 'Mihai Bazon',
479 silly resolved        email: 'mihai.bazon@gmail.com',
479 silly resolved        url: 'http://mihai.bazon.net/blog' },
479 silly resolved     version: '1.3.4',
479 silly resolved     main: './uglify-js.js',
479 silly resolved     bin: { uglifyjs: './bin/uglifyjs' },
479 silly resolved     repository: { type: 'git', url: 'git@github.com:mishoo/UglifyJS.git' },
479 silly resolved     devDependencies: { nodeunit: '0.7.x' },
479 silly resolved     scripts: { test: '$(which nodeunit || echo node_modules/nodeunit/bin/nodeunit) test/unit/scripts.js && test/testparser.js && test/testconsolidator.js' },
479 silly resolved     readme: '<?xml version="1.0" encoding="utf-8"?>\n<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"\n               "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">\n<html xmlns="http://www.w3.org/1999/xhtml"\nlang="en" xml:lang="en">\n<head>\n<title>UglifyJS &ndash; a JavaScript parser/compressor/beautifier</title>\n<meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>\n<meta name="generator" content="Org-mode"/>\n<meta name="generated" content="2012-08-27 12:38:12 EEST"/>\n<meta name="author" content="Mihai Bazon"/>\n<meta name="description" content="a JavaScript parser/compressor/beautifier in JavaScript"/>\n<meta name="keywords" content="javascript, js, parser, compiler, compressor, mangle, minify, minifier"/>\n<style type="text/css">\n <!--/*--><![CDATA[/*><!--*/\n  html { font-family: Times, serif; font-size: 12pt; }\n  .title  { text-align: center; }\n  .todo   { color: red; }\n  .done   { color: green; }\n  .tag    { background-color: #add8e6; font-weight:normal }\n  .target { }\n  .timestamp { color: #bebebe; }\n  .timestamp-kwd { color: #5f9ea0; }\n  .right  {margin-left:auto; margin-right:0px;  text-align:right;}\n  .left   {margin-left:0px;  margin-right:auto; text-align:left;}\n  .center {margin-left:auto; margin-right:auto; text-align:center;}\n  p.verse { margin-left: 3% }\n  pre {\n\tborder: 1pt solid #AEBDCC;\n\tbackground-color: #F3F5F7;\n\tpadding: 5pt;\n\tfont-family: courier, monospace;\n        font-size: 90%;\n        overflow:auto;\n  }\n  table { border-collapse: collapse; }\n  td, th { vertical-align: top;  }\n  th.right  { text-align:center;  }\n  th.left   { text-align:center;   }\n  th.center { text-align:center; }\n  td.right  { text-align:right;  }\n  td.left   { text-align:left;   }\n  td.center { text-align:center; }\n  dt { font-weight: bold; }\n  div.figure { padding: 0.5em; }\n  div.figure p { text-align: center; }\n  div.inlinetask {\n    padding:10px;\n    border:2px solid gray;\n    margin:10px;\n    background: #ffffcc;\n  }\n  textarea { overflow-x: auto; }\n  .linenr { font-size:smaller }\n  .code-highlighted {background-color:#ffff00;}\n  .org-info-js_info-navigation { border-style:none; }\n  #org-info-js_console-label { font-size:10px; font-weight:bold;\n                               white-space:nowrap; }\n  .org-info-js_search-highlight {background-color:#ffff00; color:#000000;\n                                 font-weight:bold; }\n  /*]]>*/-->\n</style>\n<link rel="stylesheet" type="text/css" href="docstyle.css" />\n<script type="text/javascript">\n<!--/*--><![CDATA[/*><!--*/\n function CodeHighlightOn(elem, id)\n {\n   var target = document.getElementById(id);\n   if(null != target) {\n     elem.cacheClassElem = elem.className;\n     elem.cacheClassTarget = target.className;\n     target.className = "code-highlighted";\n     elem.className   = "code-highlighted";\n   }\n }\n function CodeHighlightOff(elem, id)\n {\n   var target = document.getElementById(id);\n   if(elem.cacheClassElem)\n     elem.className = elem.cacheClassElem;\n   if(elem.cacheClassTarget)\n     target.className = elem.cacheClassTarget;\n }\n/*]]>*///-->\n</script>\n\n</head>\n<body>\n\n<div id="preamble">\n\n</div>\n\n<div id="content">\n<h1 class="title">UglifyJS &ndash; a JavaScript parser/compressor/beautifier</h1>\n\n\n<div id="table-of-contents">\n<h2>Table of Contents</h2>\n<div id="text-table-of-contents">\n<ul>\n<li><a href="#sec-1">1 NEW: UglifyJS2 </a></li>\n<li><a href="#sec-2">2 UglifyJS &mdash; a JavaScript parser/compressor/beautifier </a>\n<ul>\n<li><a href="#sec-2-1">2.1 Unsafe transformations </a>\n<ul>\n<li><a href="#sec-2-1-1">2.1.1 Calls involving the global Array constructor </a></li>\n<li><a href="#sec-2-1-2">2.1.2 <code>obj.toString()</code> ==&gt; <code>obj+“”</code> </a></li>\n</ul>\n</li>\n<li><a href="#sec-2-2">2.2 Install (NPM) </a></li>\n<li><a href="#sec-2-3">2.3 Install latest code from GitHub </a></li>\n<li><a href="#sec-2-4">2.4 Usage </a>\n<ul>\n<li><a href="#sec-2-4-1">2.4.1 API </a></li>\n<li><a href="#sec-2-4-2">2.4.2 Beautifier shortcoming &ndash; no more comments </a></li>\n<li><a href="#sec-2-4-3">2.4.3 Use as a code pre-processor </a></li>\n</ul>\n</li>\n<li><a href="#sec-2-5">2.5 Compression &ndash; how good is it? </a></li>\n<li><a href="#sec-2-6">2.6 Bugs? </a></li>\n<li><a href="#sec-2-7">2.7 Links </a></li>\n<li><a href="#sec-2-8">2.8 License </a></li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n\n<div id="outline-container-1" class="outline-2">\n<h2 id="sec-1"><span class="section-number-2">1</span> NEW: UglifyJS2 </h2>\n<div class="outline-text-2" id="text-1">\n\n\n<p>\nI started working on UglifyJS\'s successor, version 2.  It\'s almost a full\nrewrite (except for the parser which is heavily modified, everything else\nstarts from scratch).  I\'ve detailed my reasons in the README, see the\nproject page.\n</p>\n<p>\n<a href="https://github.com/mishoo/UglifyJS2">https://github.com/mishoo/UglifyJS2</a>\n</p>\n<p>\nVersion 1 will continue to be maintained for fixing show-stopper bugs, but\nno new features should be expected.\n</p>\n<p>\nPlease help me focus on version 2 by <a href="http://pledgie.com/campaigns/18110">making a donation</a>!\n</p>\n</div>\n\n</div>\n\n<div id="outline-container-2" class="outline-2">\n<h2 id="sec-2"><span class="section-number-2">2</span> UglifyJS &mdash; a JavaScript parser/compressor/beautifier </h2>\n<div class="outline-text-2" id="text-2">\n\n\n<p>\nThis package implements a general-purpose JavaScript\nparser/compressor/beautifier toolkit.  It is developed on <a href="http://nodejs.org/">NodeJS</a>, but it\nshould work on any JavaScript platform supporting the CommonJS module system\n(and if your platform of choice doesn\'t support CommonJS, you can easily\nimplement it, or discard the <code>exports.*</code> lines from UglifyJS sources).\n</p>\n<p>\nThe tokenizer/parser generates an abstract syntax tree from JS code.  You\ncan then traverse the AST to learn more about the code, or do various\nmanipulations on it.  This part is implemented in <a href="../lib/parse-js.js">parse-js.js</a> and it\'s a\nport to JavaScript of the excellent <a href="http://marijn.haverbeke.nl/parse-js/">parse-js</a> Common Lisp library from <a href="http://marijn.haverbeke.nl/">Marijn Haverbeke</a>.\n</p>\n<p>\n( See <a href="http://github.com/mishoo/cl-uglify-js">cl-uglify-js</a> if you\'re looking for the Common Lisp version of\nUglifyJS. )\n</p>\n<p>\nThe second part of this package, implemented in <a href="../lib/process.js">process.js</a>, inspects and\nmanipulates the AST generated by the parser to provide the following:\n</p>\n<ul>\n<li>ability to re-generate JavaScript code from the AST.  Optionally\n  indented&mdash;you can use this if you want to “beautify” a program that has\n  been compressed, so that you can inspect the source.  But you can also run\n  our code generator to print out an AST without any whitespace, so you\n  achieve compression as well.\n\n</li>\n<li>shorten variable names (usually to single characters).  Our mangler will\n  analyze the code and generate proper variable names, depending on scope\n  and usage, and is smart enough to deal with globals defined elsewhere, or\n  with <code>eval()</code> calls or <code>with{}</code> statements.  In short, if <code>eval()</code> or\n  <code>with{}</code> are used in some scope, then all variables in that scope and any\n  variables in the parent scopes will remain unmangled, and any references\n  to such variables remain unmangled as well.\n\n</li>\n<li>various small optimizations that may lead to faster code but certainly\n  lead to smaller code.  Where possible, we do the following:\n\n<ul>\n<li>foo["bar"]  ==&gt;  foo.bar\n\n</li>\n<li>remove block brackets <code>{}</code>\n\n</li>\n<li>join consecutive var declarations:\n    var a = 10; var b = 20; ==&gt; var a=10,b=20;\n\n</li>\n<li>resolve simple constant expressions: 1 +2 * 3 ==&gt; 7.  We only do the\n    replacement if the result occupies less bytes; for example 1/3 would\n    translate to 0.333333333333, so in this case we don\'t replace it.\n\n</li>\n<li>consecutive statements in blocks are merged into a sequence; in many\n    cases, this leaves blocks with a single statement, so then we can remove\n    the block brackets.\n\n</li>\n<li>various optimizations for IF statements:\n\n<ul>\n<li>if (foo) bar(); else baz(); ==&gt; foo?bar():baz();\n</li>\n<li>if (!foo) bar(); else baz(); ==&gt; foo?baz():bar();\n</li>\n<li>if (foo) bar(); ==&gt; foo&amp;&amp;bar();\n</li>\n<li>if (!foo) bar(); ==&gt; foo||bar();\n</li>\n<li>if (foo) return bar(); else return baz(); ==&gt; return foo?bar():baz();\n</li>\n<li>if (foo) return bar(); else something(); ==&gt; {if(foo)return bar();something()}\n\n</li>\n</ul>\n\n</li>\n<li>remove some unreachable code and warn about it (code that follows a\n    <code>return</code>, <code>throw</code>, <code>break</code> or <code>continue</code> statement, except\n    function/variable declarations).\n\n</li>\n<li>act a limited version of a pre-processor (c.f. the pre-processor of\n    C/C++) to allow you to safely replace selected global symbols with\n    specified values.  When combined with the optimisations above this can\n    make UglifyJS operate slightly more like a compilation process, in\n    that when certain symbols are replaced by constant values, entire code\n    blocks may be optimised away as unreachable.\n</li>\n</ul>\n\n</li>\n</ul>\n\n\n\n</div>\n\n<div id="outline-container-2-1" class="outline-3">\n<h3 id="sec-2-1"><span class="section-number-3">2.1</span> <span class="target">Unsafe transformations</span>  </h3>\n<div class="outline-text-3" id="text-2-1">\n\n\n<p>\nThe following transformations can in theory break code, although they\'re\nprobably safe in most practical cases.  To enable them you need to pass the\n<code>--unsafe</code> flag.\n</p>\n\n</div>\n\n<div id="outline-container-2-1-1" class="outline-4">\n<h4 id="sec-2-1-1"><span class="section-number-4">2.1.1</span> Calls involving the global Array constructor </h4>\n<div class="outline-text-4" id="text-2-1-1">\n\n\n<p>\nThe following transformations occur:\n</p>\n\n\n\n<pre class="src src-js"><span class="org-keyword">new</span> <span class="org-type">Array</span>(1, 2, 3, 4)  =&gt; [1,2,3,4]\nArray(a, b, c)         =&gt; [a,b,c]\n<span class="org-keyword">new</span> <span class="org-type">Array</span>(5)           =&gt; Array(5)\n<span class="org-keyword">new</span> <span class="org-type">Array</span>(a)           =&gt; Array(a)\n</pre>\n\n\n<p>\nThese are all safe if the Array name isn\'t redefined.  JavaScript does allow\none to globally redefine Array (and pretty much everything, in fact) but I\npersonally don\'t see why would anyone do that.\n</p>\n<p>\nUglifyJS does handle the case where Array is redefined locally, or even\nglobally but with a <code>function</code> or <code>var</code> declaration.  Therefore, in the\nfollowing cases UglifyJS <b>doesn\'t touch</b> calls or instantiations of Array:\n</p>\n\n\n\n<pre class="src src-js"><span class="org-comment-delimiter">// </span><span class="org-comment">case 1.  globally declared variable</span>\n  <span class="org-keyword">var</span> <span class="org-variable-name">Array</span>;\n  <span class="org-keyword">new</span> <span class="org-type">Array</span>(1, 2, 3);\n  Array(a, b);\n\n  <span class="org-comment-delimiter">// </span><span class="org-comment">or (can be declared later)</span>\n  <span class="org-keyword">new</span> <span class="org-type">Array</span>(1, 2, 3);\n  <span class="org-keyword">var</span> <span class="org-variable-name">Array</span>;\n\n  <span class="org-comment-delimiter">// </span><span class="org-comment">or (can be a function)</span>\n  <span class="org-keyword">new</span> <span class="org-type">Array</span>(1, 2, 3);\n  <span class="org-keyword">function</span> <span class="org-function-name">Array</span>() { ... }\n\n<span class="org-comment-delimiter">// </span><span class="org-comment">case 2.  declared in a function</span>\n  (<span class="org-keyword">function</span>(){\n    a = <span class="org-keyword">new</span> <span class="org-type">Array</span>(1, 2, 3);\n    b = Array(5, 6);\n    <span class="org-keyword">var</span> <span class="org-variable-name">Array</span>;\n  })();\n\n  <span class="org-comment-delimiter">// </span><span class="org-comment">or</span>\n  (<span class="org-keyword">function</span>(<span class="org-variable-name">Array</span>){\n    <span class="org-keyword">return</span> Array(5, 6, 7);\n  })();\n\n  <span class="org-comment-delimiter">// </span><span class="org-comment">or</span>\n  (<span class="org-keyword">function</span>(){\n    <span class="org-keyword">return</span> <span class="org-keyword">new</span> <span class="org-type">Array</span>(1, 2, 3, 4);\n    <span class="org-keyword">function</span> <span class="org-function-name">Array</span>() { ... }\n  })();\n\n  <span class="org-comment-delimiter">// </span><span class="org-comment">etc.</span>\n</pre>\n\n\n</div>\n\n</div>\n\n<div id="outline-container-2-1-2" class="outline-4">\n<h4 id="sec-2-1-2"><span class="section-number-4">2.1.2</span> <code>obj.toString()</code> ==&gt; <code>obj+“”</code> </h4>\n<div class="outline-text-4" id="text-2-1-2">\n\n\n</div>\n</div>\n\n</div>\n\n<div id="outline-container-2-2" class="outline-3">\n<h3 id="sec-2-2"><span class="section-number-3">2.2</span> Install (NPM) </h3>\n<div class="outline-text-3" id="text-2-2">\n\n\n<p>\nUglifyJS is now available through NPM &mdash; <code>npm install uglify-js</code> should do\nthe job.\n</p>\n</div>\n\n</div>\n\n<div id="outline-container-2-3" class="outline-3">\n<h3 id="sec-2-3"><span class="section-number-3">2.3</span> Install latest code from GitHub </h3>\n<div class="outline-text-3" id="text-2-3">\n\n\n\n\n\n<pre class="src src-sh"><span class="org-comment-delimiter">## </span><span class="org-comment">clone the repository</span>\nmkdir -p /where/you/wanna/put/it\n<span class="org-builtin">cd</span> /where/you/wanna/put/it\ngit clone git://github.com/mishoo/UglifyJS.git\n\n<span class="org-comment-delimiter">## </span><span class="org-comment">make the module available to Node</span>\nmkdir -p ~/.node_libraries/\n<span class="org-builtin">cd</span> ~/.node_libraries/\nln -s /where/you/wanna/put/it/UglifyJS/uglify-js.js\n\n<span class="org-comment-delimiter">## </span><span class="org-comment">and if you want the CLI script too:</span>\nmkdir -p ~/bin\n<span class="org-builtin">cd</span> ~/bin\nln -s /where/you/wanna/put/it/UglifyJS/bin/uglifyjs\n  <span class="org-comment-delimiter"># </span><span class="org-comment">(then add ~/bin to your $PATH if it\'s not there already)</span>\n</pre>\n\n\n</div>\n\n</div>\n\n<div id="outline-container-2-4" class="outline-3">\n<h3 id="sec-2-4"><span class="section-number-3">2.4</span> Usage </h3>\n<div class="outline-text-3" id="text-2-4">\n\n\n<p>\nThere is a command-line tool that exposes the functionality of this library\nfor your shell-scripting needs:\n</p>\n\n\n\n<pre class="src src-sh">uglifyjs [ options... ] [ filename ]\n</pre>\n\n\n<p>\n<code>filename</code> should be the last argument and should name the file from which\nto read the JavaScript code.  If you don\'t specify it, it will read code\nfrom STDIN.\n</p>\n<p>\nSupported options:\n</p>\n<ul>\n<li><code>-b</code> or <code>--beautify</code> &mdash; output indented code; when passed, additional\n  options control the beautifier:\n\n<ul>\n<li><code>-i N</code> or <code>--indent N</code> &mdash; indentation level (number of spaces)\n\n</li>\n<li><code>-q</code> or <code>--quote-keys</code> &mdash; quote keys in literal objects (by default,\n    only keys that cannot be identifier names will be quotes).\n\n</li>\n</ul>\n\n</li>\n<li><code>-c</code> or <code>----consolidate-primitive-values</code> &mdash; consolidates null, Boolean,\n  and String values. Known as aliasing in the Closure Compiler. Worsens the\n  data compression ratio of gzip.\n\n</li>\n<li><code>--ascii</code> &mdash; pass this argument to encode non-ASCII characters as\n  <code>\\uXXXX</code> sequences.  By default UglifyJS won\'t bother to do it and will\n  output Unicode characters instead.  (the output is always encoded in UTF8,\n  but if you pass this option you\'ll only get ASCII).\n\n</li>\n<li><code>-nm</code> or <code>--no-mangle</code> &mdash; don\'t mangle names.\n\n</li>\n<li><code>-nmf</code> or <code>--no-mangle-functions</code> &ndash; in case you want to mangle variable\n  names, but not touch function names.\n\n</li>\n<li><code>-ns</code> or <code>--no-squeeze</code> &mdash; don\'t call <code>ast_squeeze()</code> (which does various\n  optimizations that result in smaller, less readable code).\n\n</li>\n<li><code>-mt</code> or <code>--mangle-toplevel</code> &mdash; mangle names in the toplevel scope too\n  (by default we don\'t do this).\n\n</li>\n<li><code>--no-seqs</code> &mdash; when <code>ast_squeeze()</code> is called (thus, unless you pass\n  <code>--no-squeeze</code>) it will reduce consecutive statements in blocks into a\n  sequence.  For example, "a = 10; b = 20; foo();" will be written as\n  "a=10,b=20,foo();".  In various occasions, this allows us to discard the\n  block brackets (since the block becomes a single statement).  This is ON\n  by default because it seems safe and saves a few hundred bytes on some\n  libs that I tested it on, but pass <code>--no-seqs</code> to disable it.\n\n</li>\n<li><code>--no-dead-code</code> &mdash; by default, UglifyJS will remove code that is\n  obviously unreachable (code that follows a <code>return</code>, <code>throw</code>, <code>break</code> or\n  <code>continue</code> statement and is not a function/variable declaration).  Pass\n  this option to disable this optimization.\n\n</li>\n<li><code>-nc</code> or <code>--no-copyright</code> &mdash; by default, <code>uglifyjs</code> will keep the initial\n  comment tokens in the generated code (assumed to be copyright information\n  etc.).  If you pass this it will discard it.\n\n</li>\n<li><code>-o filename</code> or <code>--output filename</code> &mdash; put the result in <code>filename</code>.  If\n  this isn\'t given, the result goes to standard output (or see next one).\n\n</li>\n<li><code>--overwrite</code> &mdash; if the code is read from a file (not from STDIN) and you\n  pass <code>--overwrite</code> then the output will be written in the same file.\n\n</li>\n<li><code>--ast</code> &mdash; pass this if you want to get the Abstract Syntax Tree instead\n  of JavaScript as output.  Useful for debugging or learning more about the\n  internals.\n\n</li>\n<li><code>-v</code> or <code>--verbose</code> &mdash; output some notes on STDERR (for now just how long\n  each operation takes).\n\n</li>\n<li><code>-d SYMBOL[=VALUE]</code> or <code>--define SYMBOL[=VALUE]</code> &mdash; will replace\n  all instances of the specified symbol where used as an identifier\n  (except where symbol has properly declared by a var declaration or\n  use as function parameter or similar) with the specified value. This\n  argument may be specified multiple times to define multiple\n  symbols - if no value is specified the symbol will be replaced with\n  the value <code>true</code>, or you can specify a numeric value (such as\n  <code>1024</code>), a quoted string value (such as ="object"= or\n  =\'https://github.com\'<code>), or the name of another symbol or keyword   (such as =null</code> or <code>document</code>).\n  This allows you, for example, to assign meaningful names to key\n  constant values but discard the symbolic names in the uglified\n  version for brevity/efficiency, or when used wth care, allows\n  UglifyJS to operate as a form of <b>conditional compilation</b>\n  whereby defining appropriate values may, by dint of the constant\n  folding and dead code removal features above, remove entire\n  superfluous code blocks (e.g. completely remove instrumentation or\n  trace code for production use).\n  Where string values are being defined, the handling of quotes are\n  likely to be subject to the specifics of your command shell\n  environment, so you may need to experiment with quoting styles\n  depending on your platform, or you may find the option\n  <code>--define-from-module</code> more suitable for use.\n\n</li>\n<li><code>-define-from-module SOMEMODULE</code> &mdash; will load the named module (as\n  per the NodeJS <code>require()</code> function) and iterate all the exported\n  properties of the module defining them as symbol names to be defined\n  (as if by the <code>--define</code> option) per the name of each property\n  (i.e. without the module name prefix) and given the value of the\n  property. This is a much easier way to handle and document groups of\n  symbols to be defined rather than a large number of <code>--define</code>\n  options.\n\n</li>\n<li><code>--unsafe</code> &mdash; enable other additional optimizations that are known to be\n  unsafe in some contrived situations, but could still be generally useful.\n  For now only these:\n\n<ul>\n<li>foo.toString()  ==&gt;  foo+""\n</li>\n<li>new Array(x,&hellip;)  ==&gt; [x,&hellip;]\n</li>\n<li>new Array(x) ==&gt; Array(x)\n\n</li>\n</ul>\n\n</li>\n<li><code>--max-line-len</code> (default 32K characters) &mdash; add a newline after around\n  32K characters.  I\'ve seen both FF and Chrome croak when all the code was\n  on a single line of around 670K.  Pass &ndash;max-line-len 0 to disable this\n  safety feature.\n\n</li>\n<li><code>--reserved-names</code> &mdash; some libraries rely on certain names to be used, as\n  pointed out in issue #92 and #81, so this option allow you to exclude such\n  names from the mangler.  For example, to keep names <code>require</code> and <code>$super</code>\n  intact you\'d specify &ndash;reserved-names "require,$super".\n\n</li>\n<li><code>--inline-script</code> &ndash; when you want to include the output literally in an\n  HTML <code>&lt;script&gt;</code> tag you can use this option to prevent <code>&lt;/script</code> from\n  showing up in the output.\n\n</li>\n<li><code>--lift-vars</code> &ndash; when you pass this, UglifyJS will apply the following\n  transformations (see the notes in API, <code>ast_lift_variables</code>):\n\n<ul>\n<li>put all <code>var</code> declarations at the start of the scope\n</li>\n<li>make sure a variable is declared only once\n</li>\n<li>discard unused function arguments\n</li>\n<li>discard unused inner (named) functions\n</li>\n<li>finally, try to merge assignments into that one <code>var</code> declaration, if\n    possible.\n</li>\n</ul>\n\n</li>\n</ul>\n\n\n\n</div>\n\n<div id="outline-container-2-4-1" class="outline-4">\n<h4 id="sec-2-4-1"><span class="section-number-4">2.4.1</span> API </h4>\n<div class="outline-text-4" id="text-2-4-1">\n\n\n<p>\nTo use the library from JavaScript, you\'d do the following (example for\nNodeJS):\n</p>\n\n\n\n<pre class="src src-js"><span class="org-keyword">var</span> <span class="org-variable-name">jsp</span> = require(<span class="org-string">"uglify-js"</span>).parser;\n<span class="org-keyword">var</span> <span class="org-variable-name">pro</span> = require(<span class="org-string">"uglify-js"</span>).uglify;\n\n<span class="org-keyword">var</span> <span class="org-variable-name">orig_code</span> = <span class="org-string">"... JS code here"</span>;\n<span class="org-keyword">var</span> <span class="org-variable-name">ast</span> = jsp.parse(orig_code); <span class="org-comment-delimiter">// </span><span class="org-comment">parse code and get the initial AST</span>\nast = pro.ast_mangle(ast); <span class="org-comment-delimiter">// </span><span class="org-comment">get a new AST with mangled names</span>\nast = pro.ast_squeeze(ast); <span class="org-comment-delimiter">// </span><span class="org-comment">get an AST with compression optimizations</span>\n<span class="org-keyword">var</span> <span class="org-variable-name">final_code</span> = pro.gen_code(ast); <span class="org-comment-delimiter">// </span><span class="org-comment">compressed code here</span>\n</pre>\n\n\n<p>\nThe above performs the full compression that is possible right now.  As you\ncan see, there are a sequence of steps which you can apply.  For example if\nyou want compressed output but for some reason you don\'t want to mangle\nvariable names, you would simply skip the line that calls\n<code>pro.ast_mangle(ast)</code>.\n</p>\n<p>\nSome of these functions take optional arguments.  Here\'s a description:\n</p>\n<ul>\n<li><code>jsp.parse(code, strict_semicolons)</code> &ndash; parses JS code and returns an AST.\n  <code>strict_semicolons</code> is optional and defaults to <code>false</code>.  If you pass\n  <code>true</code> then the parser will throw an error when it expects a semicolon and\n  it doesn\'t find it.  For most JS code you don\'t want that, but it\'s useful\n  if you want to strictly sanitize your code.\n\n</li>\n<li><code>pro.ast_lift_variables(ast)</code> &ndash; merge and move <code>var</code> declarations to the\n  scop of the scope; discard unused function arguments or variables; discard\n  unused (named) inner functions.  It also tries to merge assignments\n  following the <code>var</code> declaration into it.\n\n<p>\n  If your code is very hand-optimized concerning <code>var</code> declarations, this\n  lifting variable declarations might actually increase size.  For me it\n  helps out.  On jQuery it adds 865 bytes (243 after gzip).  YMMV.  Also\n  note that (since it\'s not enabled by default) this operation isn\'t yet\n  heavily tested (please report if you find issues!).\n</p>\n<p>\n  Note that although it might increase the image size (on jQuery it gains\n  865 bytes, 243 after gzip) it\'s technically more correct: in certain\n  situations, dead code removal might drop variable declarations, which\n  would not happen if the variables are lifted in advance.\n</p>\n<p>\n  Here\'s an example of what it does:\n</p></li>\n</ul>\n\n\n\n\n\n<pre class="src src-js"><span class="org-keyword">function</span> <span class="org-function-name">f</span>(<span class="org-variable-name">a</span>, <span class="org-variable-name">b</span>, <span class="org-variable-name">c</span>, <span class="org-variable-name">d</span>, <span class="org-variable-name">e</span>) {\n    <span class="org-keyword">var</span> <span class="org-variable-name">q</span>;\n    <span class="org-keyword">var</span> <span class="org-variable-name">w</span>;\n    w = 10;\n    q = 20;\n    <span class="org-keyword">for</span> (<span class="org-keyword">var</span> <span class="org-variable-name">i</span> = 1; i &lt; 10; ++i) {\n        <span class="org-keyword">var</span> <span class="org-variable-name">boo</span> = foo(a);\n    }\n    <span class="org-keyword">for</span> (<span class="org-keyword">var</span> <span class="org-variable-name">i</span> = 0; i &lt; 1; ++i) {\n        <span class="org-keyword">var</span> <span class="org-variable-name">boo</span> = bar(c);\n    }\n    <span class="org-keyword">function</span> <span class="org-function-name">foo</span>(){ ... }\n    <span class="org-keyword">function</span> <span class="org-function-name">bar</span>(){ ... }\n    <span class="org-keyword">function</span> <span class="org-function-name">baz</span>(){ ... }\n}\n\n<span class="org-comment-delimiter">// </span><span class="org-comment">transforms into ==&gt;</span>\n\n<span class="org-keyword">function</span> <span class="org-function-name">f</span>(<span class="org-variable-name">a</span>, <span class="org-variable-name">b</span>, <span class="org-variable-name">c</span>) {\n    <span class="org-keyword">var</span> <span class="org-variable-name">i</span>, <span class="org-variable-name">boo</span>, <span class="org-variable-name">w</span> = 10, <span class="org-variable-name">q</span> = 20;\n    <span class="org-keyword">for</span> (i = 1; i &lt; 10; ++i) {\n        boo = foo(a);\n    }\n    <span class="org-keyword">for</span> (i = 0; i &lt; 1; ++i) {\n        boo = bar(c);\n    }\n    <span class="org-keyword">function</span> <span class="org-function-name">foo</span>() { ... }\n    <span class="org-keyword">function</span> <span class="org-function-name">bar</span>() { ... }\n}\n</pre>\n\n\n<ul>\n<li><code>pro.ast_mangle(ast, options)</code> &ndash; generates a new AST containing mangled\n  (compressed) variable and function names.  It supports the following\n  options:\n\n<ul>\n<li><code>toplevel</code> &ndash; mangle toplevel names (by default we don\'t touch them).\n</li>\n<li><code>except</code> &ndash; an array of names to exclude from compression.\n</li>\n<li><code>defines</code> &ndash; an object with properties named after symbols to\n    replace (see the <code>--define</code> option for the script) and the values\n    representing the AST replacement value.\n\n</li>\n</ul>\n\n</li>\n<li><code>pro.ast_squeeze(ast, options)</code> &ndash; employs further optimizations designed\n  to reduce the size of the code that <code>gen_code</code> would generate from the\n  AST.  Returns a new AST.  <code>options</code> can be a hash; the supported options\n  are:\n\n<ul>\n<li><code>make_seqs</code> (default true) which will cause consecutive statements in a\n    block to be merged using the "sequence" (comma) operator\n\n</li>\n<li><code>dead_code</code> (default true) which will remove unreachable code.\n\n</li>\n</ul>\n\n</li>\n<li><code>pro.gen_code(ast, options)</code> &ndash; generates JS code from the AST.  By\n  default it\'s minified, but using the <code>options</code> argument you can get nicely\n  formatted output.  <code>options</code> is, well, optional :-) and if you pass it it\n  must be an object and supports the following properties (below you can see\n  the default values):\n\n<ul>\n<li><code>beautify: false</code> &ndash; pass <code>true</code> if you want indented output\n</li>\n<li><code>indent_start: 0</code> (only applies when <code>beautify</code> is <code>true</code>) &ndash; initial\n    indentation in spaces\n</li>\n<li><code>indent_level: 4</code> (only applies when <code>beautify</code> is <code>true</code>) --\n    indentation level, in spaces (pass an even number)\n</li>\n<li><code>quote_keys: false</code> &ndash; if you pass <code>true</code> it will quote all keys in\n    literal objects\n</li>\n<li><code>space_colon: false</code> (only applies when <code>beautify</code> is <code>true</code>) &ndash; wether\n    to put a space before the colon in object literals\n</li>\n<li><code>ascii_only: false</code> &ndash; pass <code>true</code> if you want to encode non-ASCII\n    characters as <code>\\uXXXX</code>.\n</li>\n<li><code>inline_script: false</code> &ndash; pass <code>true</code> to escape occurrences of\n    <code>&lt;/script</code> in strings\n</li>\n</ul>\n\n</li>\n</ul>\n\n\n</div>\n\n</div>\n\n<div id="outline-container-2-4-2" class="outline-4">\n<h4 id="sec-2-4-2"><span class="section-number-4">2.4.2</span> Beautifier shortcoming &ndash; no more comments </h4>\n<div class="outline-text-4" id="text-2-4-2">\n\n\n<p>\nThe beautifier can be used as a general purpose indentation tool.  It\'s\nuseful when you want to make a minified file readable.  One limitation,\nthough, is that it discards all comments, so you don\'t really want to use it\nto reformat your code, unless you don\'t have, or don\'t care about, comments.\n</p>\n<p>\nIn fact it\'s not the beautifier who discards comments &mdash; they are dumped at\nthe parsing stage, when we build the initial AST.  Comments don\'t really\nmake sense in the AST, and while we could add nodes for them, it would be\ninconvenient because we\'d have to add special rules to ignore them at all\nthe processing stages.\n</p>\n</div>\n\n</div>\n\n<div id="outline-container-2-4-3" class="outline-4">\n<h4 id="sec-2-4-3"><span class="section-number-4">2.4.3</span> Use as a code pre-processor </h4>\n<div class="outline-text-4" id="text-2-4-3">\n\n\n<p>\nThe <code>--define</code> option can be used, particularly when combined with the\nconstant folding logic, as a form of pre-processor to enable or remove\nparticular constructions, such as might be used for instrumenting\ndevelopment code, or to produce variations aimed at a specific\nplatform.\n</p>\n<p>\nThe code below illustrates the way this can be done, and how the\nsymbol replacement is performed.\n</p>\n\n\n\n<pre class="src src-js">CLAUSE1: <span class="org-keyword">if</span> (<span class="org-keyword">typeof</span> DEVMODE === <span class="org-string">\'undefined\'</span>) {\n    DEVMODE = <span class="org-constant">true</span>;\n}\n\n<span class="org-function-name">CLAUSE2</span>: <span class="org-keyword">function</span> init() {\n    <span class="org-keyword">if</span> (DEVMODE) {\n        console.log(<span class="org-string">"init() called"</span>);\n    }\n    ....\n    DEVMODE &amp;amp;&amp;amp; console.log(<span class="org-string">"init() complete"</span>);\n}\n\n<span class="org-function-name">CLAUSE3</span>: <span class="org-keyword">function</span> reportDeviceStatus(<span class="org-variable-name">device</span>) {\n    <span class="org-keyword">var</span> <span class="org-variable-name">DEVMODE</span> = device.mode, <span class="org-variable-name">DEVNAME</span> = device.name;\n    <span class="org-keyword">if</span> (DEVMODE === <span class="org-string">\'open\'</span>) {\n        ....\n    }\n}\n</pre>\n\n\n<p>\nWhen the above code is normally executed, the undeclared global\nvariable <code>DEVMODE</code> will be assigned the value <b>true</b> (see <code>CLAUSE1</code>)\nand so the <code>init()</code> function (<code>CLAUSE2</code>) will write messages to the\nconsole log when executed, but in <code>CLAUSE3</code> a locally declared\nvariable will mask access to the <code>DEVMODE</code> global symbol.\n</p>\n<p>\nIf the above code is processed by UglifyJS with an argument of\n<code>--define DEVMODE=false</code> then UglifyJS will replace <code>DEVMODE</code> with the\nboolean constant value <b>false</b> within <code>CLAUSE1</code> and <code>CLAUSE2</code>, but it\nwill leave <code>CLAUSE3</code> as it stands because there <code>DEVMODE</code> resolves to\na validly declared variable.\n</p>\n<p>\nAnd more so, the constant-folding features of UglifyJS will recognise\nthat the <code>if</code> condition of <code>CLAUSE1</code> is thus always false, and so will\nremove the test and body of <code>CLAUSE1</code> altogether (including the\notherwise slightly problematical statement <code>false = true;</code> which it\nwill have formed by replacing <code>DEVMODE</code> in the body).  Similarly,\nwithin <code>CLAUSE2</code> both calls to <code>console.log()</code> will be removed\naltogether.\n</p>\n<p>\nIn this way you can mimic, to a limited degree, the functionality of\nthe C/C++ pre-processor to enable or completely remove blocks\ndepending on how certain symbols are defined - perhaps using UglifyJS\nto generate different versions of source aimed at different\nenvironments\n</p>\n<p>\nIt is recommmended (but not made mandatory) that symbols designed for\nthis purpose are given names consisting of <code>UPPER_CASE_LETTERS</code> to\ndistinguish them from other (normal) symbols and avoid the sort of\nclash that <code>CLAUSE3</code> above illustrates.\n</p>\n</div>\n</div>\n\n</div>\n\n<div id="outline-container-2-5" class="outline-3">\n<h3 id="sec-2-5"><span class="section-number-3">2.5</span> Compression &ndash; how good is it? </h3>\n<div class="outline-text-3" id="text-2-5">\n\n\n<p>\nHere are updated statistics.  (I also updated my Google Closure and YUI\ninstallations).\n</p>\n<p>\nWe\'re still a lot better than YUI in terms of compression, though slightly\nslower.  We\'re still a lot faster than Closure, and compression after gzip\nis comparable.\n</p>\n<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">\n<caption></caption>\n<colgroup><col class="left" /><col class="left" /><col class="right" /><col class="left" /><col class="right" /><col class="left" /><col class="right" />\n</colgroup>\n<thead>\n<tr><th scope="col" class="left">File</th><th scope="col" class="left">UglifyJS</th><th scope="col" class="right">UglifyJS+gzip</th><th scope="col" class="left">Closure</th><th scope="col" class="right">Closure+gzip</th><th scope="col" class="left">YUI</th><th scope="col" class="right">YUI+gzip</th></tr>\n</thead>\n<tbody>\n<tr><td class="left">jquery-1.6.2.js</td><td class="left">91001 (0:01.59)</td><td class="right">31896</td><td class="left">90678 (0:07.40)</td><td class="right">31979</td><td class="left">101527 (0:01.82)</td><td class="right">34646</td></tr>\n<tr><td class="left">paper.js</td><td class="left">142023 (0:01.65)</td><td class="right">43334</td><td class="left">134301 (0:07.42)</td><td class="right">42495</td><td class="left">173383 (0:01.58)</td><td class="right">48785</td></tr>\n<tr><td class="left">prototype.js</td><td class="left">88544 (0:01.09)</td><td class="right">26680</td><td class="left">86955 (0:06.97)</td><td class="right">26326</td><td class="left">92130 (0:00.79)</td><td class="right">28624</td></tr>\n<tr><td class="left">thelib-full.js (DynarchLIB)</td><td class="left">251939 (0:02.55)</td><td class="right">72535</td><td class="left">249911 (0:09.05)</td><td class="right">72696</td><td class="left">258869 (0:01.94)</td><td class="right">76584</td></tr>\n</tbody>\n</table>\n\n\n</div>\n\n</div>\n\n<div id="outline-container-2-6" class="outline-3">\n<h3 id="sec-2-6"><span class="section-number-3">2.6</span> Bugs? </h3>\n<div class="outline-text-3" id="text-2-6">\n\n\n<p>\nUnfortunately, for the time being there is no automated test suite.  But I\nran the compressor manually on non-trivial code, and then I tested that the\ngenerated code works as expected.  A few hundred times.\n</p>\n<p>\nDynarchLIB was started in times when there was no good JS minifier.\nTherefore I was quite religious about trying to write short code manually,\nand as such DL contains a lot of syntactic hacks<sup><a class="footref" name="fnr.1" href="#fn.1">1</a></sup> such as “foo == bar ?  a\n= 10 : b = 20”, though the more readable version would clearly be to use\n“if/else”.\n</p>\n<p>\nSince the parser/compressor runs fine on DL and jQuery, I\'m quite confident\nthat it\'s solid enough for production use.  If you can identify any bugs,\nI\'d love to hear about them (<a href="http://groups.google.com/group/uglifyjs">use the Google Group</a> or email me directly).\n</p>\n</div>\n\n</div>\n\n<div id="outline-container-2-7" class="outline-3">\n<h3 id="sec-2-7"><span class="section-number-3">2.7</span> Links </h3>\n<div class="outline-text-3" id="text-2-7">\n\n\n<ul>\n<li>Twitter: <a href="http://twitter.com/UglifyJS">@UglifyJS</a>\n</li>\n<li>Project at GitHub: <a href="http://github.com/mishoo/UglifyJS">http://github.com/mishoo/UglifyJS</a>\n</li>\n<li>Google Group: <a href="http://groups.google.com/group/uglifyjs">http://groups.google.com/group/uglifyjs</a>\n</li>\n<li>Common Lisp JS parser: <a href="http://marijn.haverbeke.nl/parse-js/">http://marijn.haverbeke.nl/parse-js/</a>\n</li>\n<li>JS-to-Lisp compiler: <a href="http://github.com/marijnh/js">http://github.com/marijnh/js</a>\n</li>\n<li>Common Lisp JS uglifier: <a href="http://github.com/mishoo/cl-uglify-js">http://github.com/mishoo/cl-uglify-js</a>\n</li>\n</ul>\n\n\n</div>\n\n</div>\n\n<div id="outline-container-2-8" class="outline-3">\n<h3 id="sec-2-8"><span class="section-number-3">2.8</span> License </h3>\n<div class="outline-text-3" id="text-2-8">\n\n\n<p>\nUglifyJS is released under the BSD license:\n</p>\n\n\n\n<pre class="example">Copyright 2010 (c) Mihai Bazon &lt;mihai.bazon@gmail.com&gt;\nBased on parse-js (http://marijn.haverbeke.nl/parse-js/).\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n    * Redistributions of source code must retain the above\n      copyright notice, this list of conditions and the following\n      disclaimer.\n\n    * Redistributions in binary form must reproduce the above\n      copyright notice, this list of conditions and the following\n      disclaimer in the documentation and/or other materials\n      provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\nOR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\nTORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\nTHE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n</pre>\n\n\n<div id="footnotes">\n<h2 class="footnotes">Footnotes: </h2>\n<div id="text-footnotes">\n<p class="footnote"><sup><a class="footnum" name="fn.1" href="#fnr.1">1</a></sup> I even reported a few bugs and suggested some fixes in the original\n    <a href="http://marijn.haverbeke.nl/parse-js/">parse-js</a> library, and Marijn pushed fixes literally in minutes.\n</p></div>\n</div>\n</div>\n\n</div>\n</div>\n</div>\n\n<div id="postamble">\n<p class="date">Date: 2012-08-27 12:38:12 EEST</p>\n<p class="author">Author: Mihai Bazon</p>\n<p class="creator">Org version 7.7 with Emacs version 23</p>\n<a href="http://validator.w3.org/check?uri=referer">Validate XHTML 1.0</a>\n\n</div>\n</body>\n</html>\n',
479 silly resolved     readmeFilename: 'README.html',
479 silly resolved     bugs: { url: 'https://github.com/mishoo/UglifyJS/issues' },
479 silly resolved     homepage: 'https://github.com/mishoo/UglifyJS',
479 silly resolved     _id: 'uglify-js@1.3.4',
479 silly resolved     dist: { shasum: '855c7bc16c91a486325d74b8f1c225551cf2b9de' },
479 silly resolved     _from: 'uglify-js@1.3.4',
479 silly resolved     _resolved: 'https://registry.npmjs.org/uglify-js/-/uglify-js-1.3.4.tgz' },
479 silly resolved   { name: 'optimist',
479 silly resolved     version: '0.3.1',
479 silly resolved     description: 'Light-weight option parsing with an argv hash. No optstrings attached.',
479 silly resolved     main: './index.js',
479 silly resolved     directories: { lib: '.', test: 'test', example: 'examples' },
479 silly resolved     dependencies: { wordwrap: '>=0.0.1 <0.1.0' },
479 silly resolved     devDependencies: { hashish: '0.0.x', expresso: '0.7.x' },
479 silly resolved     scripts: { test: 'expresso' },
479 silly resolved     repository:
479 silly resolved      { type: 'git',
479 silly resolved        url: 'http://github.com/substack/node-optimist.git' },
479 silly resolved     keywords:
479 silly resolved      [ 'argument',
479 silly resolved        'args',
479 silly resolved        'option',
479 silly resolved        'parser',
479 silly resolved        'parsing',
479 silly resolved        'cli',
479 silly resolved        'command' ],
479 silly resolved     author:
479 silly resolved      { name: 'James Halliday',
479 silly resolved        email: 'mail@substack.net',
479 silly resolved        url: 'http://substack.net' },
479 silly resolved     license: 'MIT/X11',
479 silly resolved     engine: { node: '>=0.4' },
479 silly resolved     readme: 'optimist\n========\n\nOptimist is a node.js library for option parsing for people who hate option\nparsing. More specifically, this module is for people who like all the --bells\nand -whistlz of program usage but think optstrings are a waste of time.\n\nWith optimist, option parsing doesn\'t have to suck (as much).\n\nexamples\n========\n\nWith Optimist, the options are just a hash! No optstrings attached.\n-------------------------------------------------------------------\n\nxup.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\').argv;\n\nif (argv.rif - 5 * argv.xup > 7.138) {\n    console.log(\'Buy more riffiwobbles\');\n}\nelse {\n    console.log(\'Sell the xupptumblers\');\n}\n````\n\n***\n\n    $ ./xup.js --rif=55 --xup=9.52\n    Buy more riffiwobbles\n    \n    $ ./xup.js --rif 12 --xup 8.1\n    Sell the xupptumblers\n\n![This one\'s optimistic.](http://substack.net/images/optimistic.png)\n\nBut wait! There\'s more! You can do short options:\n-------------------------------------------------\n \nshort.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\').argv;\nconsole.log(\'(%d,%d)\', argv.x, argv.y);\n````\n\n***\n\n    $ ./short.js -x 10 -y 21\n    (10,21)\n\nAnd booleans, both long and short (and grouped):\n----------------------------------\n\nbool.js:\n\n````javascript\n#!/usr/bin/env node\nvar util = require(\'util\');\nvar argv = require(\'optimist\').argv;\n\nif (argv.s) {\n    util.print(argv.fr ? \'Le chat dit: \' : \'The cat says: \');\n}\nconsole.log(\n    (argv.fr ? \'miaou\' : \'meow\') + (argv.p ? \'.\' : \'\')\n);\n````\n\n***\n\n    $ ./bool.js -s\n    The cat says: meow\n    \n    $ ./bool.js -sp\n    The cat says: meow.\n\n    $ ./bool.js -sp --fr\n    Le chat dit: miaou.\n\nAnd non-hypenated options too! Just use `argv._`!\n-------------------------------------------------\n \nnonopt.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\').argv;\nconsole.log(\'(%d,%d)\', argv.x, argv.y);\nconsole.log(argv._);\n````\n\n***\n\n    $ ./nonopt.js -x 6.82 -y 3.35 moo\n    (6.82,3.35)\n    [ \'moo\' ]\n    \n    $ ./nonopt.js foo -x 0.54 bar -y 1.12 baz\n    (0.54,1.12)\n    [ \'foo\', \'bar\', \'baz\' ]\n\nPlus, Optimist comes with .usage() and .demand()!\n-------------------------------------------------\n\ndivide.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .usage(\'Usage: $0 -x [num] -y [num]\')\n    .demand([\'x\',\'y\'])\n    .argv;\n\nconsole.log(argv.x / argv.y);\n````\n\n***\n \n    $ ./divide.js -x 55 -y 11\n    5\n    \n    $ node ./divide.js -x 4.91 -z 2.51\n    Usage: node ./divide.js -x [num] -y [num]\n\n    Options:\n      -x  [required]\n      -y  [required]\n\n    Missing required arguments: y\n\nEVEN MORE HOLY COW\n------------------\n\ndefault_singles.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .default(\'x\', 10)\n    .default(\'y\', 10)\n    .argv\n;\nconsole.log(argv.x + argv.y);\n````\n\n***\n\n    $ ./default_singles.js -x 5\n    15\n\ndefault_hash.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .default({ x : 10, y : 10 })\n    .argv\n;\nconsole.log(argv.x + argv.y);\n````\n\n***\n\n    $ ./default_hash.js -y 7\n    17\n\nAnd if you really want to get all descriptive about it...\n---------------------------------------------------------\n\nboolean_single.js\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .boolean(\'v\')\n    .argv\n;\nconsole.dir(argv);\n````\n\n***\n\n    $ ./boolean_single.js -v foo bar baz\n    true\n    [ \'bar\', \'baz\', \'foo\' ]\n\nboolean_double.js\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .boolean([\'x\',\'y\',\'z\'])\n    .argv\n;\nconsole.dir([ argv.x, argv.y, argv.z ]);\nconsole.dir(argv._);\n````\n\n***\n\n    $ ./boolean_double.js -x -z one two three\n    [ true, false, true ]\n    [ \'one\', \'two\', \'three\' ]\n\nOptimist is here to help...\n---------------------------\n\nYou can describe parameters for help messages and set aliases. Optimist figures\nout how to format a handy help string automatically.\n\nline_count.js\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .usage(\'Count the lines in a file.\\nUsage: $0\')\n    .demand(\'f\')\n    .alias(\'f\', \'file\')\n    .describe(\'f\', \'Load a file\')\n    .argv\n;\n\nvar fs = require(\'fs\');\nvar s = fs.createReadStream(argv.file);\n\nvar lines = 0;\ns.on(\'data\', function (buf) {\n    lines += buf.toString().match(/\\n/g).length;\n});\n\ns.on(\'end\', function () {\n    console.log(lines);\n});\n````\n\n***\n\n    $ node line_count.js\n    Count the lines in a file.\n    Usage: node ./line_count.js\n\n    Options:\n      -f, --file  Load a file  [required]\n\n    Missing required arguments: f\n\n    $ node line_count.js --file line_count.js \n    20\n    \n    $ node line_count.js -f line_count.js \n    20\n\nmethods\n=======\n\nBy itself,\n\n````javascript\nrequire(\'optimist\').argv\n`````\n\nwill use `process.argv` array to construct the `argv` object.\n\nYou can pass in the `process.argv` yourself:\n\n````javascript\nrequire(\'optimist\')([ \'-x\', \'1\', \'-y\', \'2\' ]).argv\n````\n\nor use .parse() to do the same thing:\n\n````javascript\nrequire(\'optimist\').parse([ \'-x\', \'1\', \'-y\', \'2\' ])\n````\n\nThe rest of these methods below come in just before the terminating `.argv`.\n\n.alias(key, alias)\n------------------\n\nSet key names as equivalent such that updates to a key will propagate to aliases\nand vice-versa.\n\nOptionally `.alias()` can take an object that maps keys to aliases.\n\n.default(key, value)\n--------------------\n\nSet `argv[key]` to `value` if no option was specified on `process.argv`.\n\nOptionally `.default()` can take an object that maps keys to default values.\n\n.demand(key)\n------------\n\nIf `key` is a string, show the usage information and exit if `key` wasn\'t\nspecified in `process.argv`.\n\nIf `key` is a number, demand at least as many non-option arguments, which show\nup in `argv._`.\n\nIf `key` is an Array, demand each element.\n\n.describe(key, desc)\n--------------------\n\nDescribe a `key` for the generated usage information.\n\nOptionally `.describe()` can take an object that maps keys to descriptions.\n\n.options(key, opt)\n------------------\n\nInstead of chaining together `.alias().demand().default()`, you can specify\nkeys in `opt` for each of the chainable methods.\n\nFor example:\n\n````javascript\nvar argv = require(\'optimist\')\n    .options(\'f\', {\n        alias : \'file\',\n        default : \'/etc/passwd\',\n    })\n    .argv\n;\n````\n\nis the same as\n\n````javascript\nvar argv = require(\'optimist\')\n    .alias(\'f\', \'file\')\n    .default(\'f\', \'/etc/passwd\')\n    .argv\n;\n````\n\nOptionally `.options()` can take an object that maps keys to `opt` parameters.\n\n.usage(message)\n---------------\n\nSet a usage message to show which commands to use. Inside `message`, the string\n`$0` will get interpolated to the current script name or node command for the\npresent script similar to how `$0` works in bash or perl.\n\n.check(fn)\n----------\n\nCheck that certain conditions are met in the provided arguments.\n\nIf `fn` throws or returns `false`, show the thrown error, usage information, and\nexit.\n\n.boolean(key)\n-------------\n\nInterpret `key` as a boolean. If a non-flag option follows `key` in\n`process.argv`, that string won\'t get set as the value of `key`.\n\nIf `key` never shows up as a flag in `process.arguments`, `argv[key]` will be\n`false`.\n\nIf `key` is an Array, interpret all the elements as booleans.\n\n.string(key)\n------------\n\nTell the parser logic not to interpret `key` as a number or boolean.\nThis can be useful if you need to preserve leading zeros in an input.\n\nIf `key` is an Array, interpret all the elements as strings.\n\n.wrap(columns)\n--------------\n\nFormat usage output to wrap at `columns` many columns.\n\n.help()\n-------\n\nReturn the generated usage string.\n\n.showHelp(fn=console.error)\n---------------------------\n\nPrint the usage data using `fn` for printing.\n\n.parse(args)\n------------\n\nParse `args` instead of `process.argv`. Returns the `argv` object.\n\n.argv\n-----\n\nGet the arguments as a plain old object.\n\nArguments without a corresponding flag show up in the `argv._` array.\n\nThe script name or node command is available at `argv.$0` similarly to how `$0`\nworks in bash or perl.\n\nparsing tricks\n==============\n\nstop parsing\n------------\n\nUse `--` to stop parsing flags and stuff the remainder into `argv._`.\n\n    $ node examples/reflect.js -a 1 -b 2 -- -c 3 -d 4\n    { _: [ \'-c\', \'3\', \'-d\', \'4\' ],\n      \'$0\': \'node ./examples/reflect.js\',\n      a: 1,\n      b: 2 }\n\nnegate fields\n-------------\n\nIf you want to explicity set a field to false instead of just leaving it\nundefined or to override a default you can do `--no-key`.\n\n    $ node examples/reflect.js -a --no-b\n    { _: [],\n      \'$0\': \'node ./examples/reflect.js\',\n      a: true,\n      b: false }\n\nnumbers\n-------\n\nEvery argument that looks like a number (`!isNaN(Number(arg))`) is converted to\none. This way you can just `net.createConnection(argv.port)` and you can add\nnumbers out of `argv` with `+` without having that mean concatenation,\nwhich is super frustrating.\n\nduplicates\n----------\n\nIf you specify a flag multiple times it will get turned into an array containing\nall the values in order.\n\n    $ node examples/reflect.js -x 5 -x 8 -x 0\n    { _: [],\n      \'$0\': \'node ./examples/reflect.js\',\n        x: [ 5, 8, 0 ] }\n\ndot notation\n------------\n\nWhen you use dots (`.`s) in argument names, an implicit object path is assumed.\nThis lets you organize arguments into nested objects.\n\n     $ node examples/reflect.js --foo.bar.baz=33 --foo.quux=5\n     { _: [],\n       \'$0\': \'node ./examples/reflect.js\',\n         foo: { bar: { baz: 33 }, quux: 5 } }\n\ninstallation\n============\n\nWith [npm](http://github.com/isaacs/npm), just do:\n    npm install optimist\n \nor clone this project on github:\n\n    git clone http://github.com/substack/node-optimist.git\n\nTo run the tests with [expresso](http://github.com/visionmedia/expresso),\njust do:\n    \n    expresso\n\ninspired By\n===========\n\nThis module is loosely inspired by Perl\'s\n[Getopt::Casual](http://search.cpan.org/~photo/Getopt-Casual-0.13.1/Casual.pm).\n',
479 silly resolved     readmeFilename: 'README.markdown',
479 silly resolved     bugs: { url: 'https://github.com/substack/node-optimist/issues' },
479 silly resolved     homepage: 'https://github.com/substack/node-optimist',
479 silly resolved     _id: 'optimist@0.3.1',
479 silly resolved     dist: { shasum: 'd135d7d676cded25c878b84c159c4263b103be4f' },
479 silly resolved     _from: 'optimist@0.3.1',
479 silly resolved     _resolved: 'https://registry.npmjs.org/optimist/-/optimist-0.3.1.tgz' } ]
480 info install uglify-js@1.3.4 into /usr/local/lib/node_modules/jscoverage
481 info install optimist@0.3.1 into /usr/local/lib/node_modules/jscoverage
482 info installOne uglify-js@1.3.4
483 info installOne optimist@0.3.1
484 info /usr/local/lib/node_modules/jscoverage/node_modules/uglify-js unbuild
485 info /usr/local/lib/node_modules/jscoverage/node_modules/optimist unbuild
486 verbose tar unpack /home/roger/.npm/uglify-js/1.3.4/package.tgz
487 silly lockFile c7a3e64e-scoverage-node-modules-uglify-js tar:///usr/local/lib/node_modules/jscoverage/node_modules/uglify-js
488 verbose lock tar:///usr/local/lib/node_modules/jscoverage/node_modules/uglify-js /home/roger/.npm/c7a3e64e-scoverage-node-modules-uglify-js.lock
489 silly lockFile f4139750--npm-uglify-js-1-3-4-package-tgz tar:///home/roger/.npm/uglify-js/1.3.4/package.tgz
490 verbose lock tar:///home/roger/.npm/uglify-js/1.3.4/package.tgz /home/roger/.npm/f4139750--npm-uglify-js-1-3-4-package-tgz.lock
491 verbose tar unpack /home/roger/.npm/optimist/0.3.1/package.tgz
492 silly lockFile 7017c0b3-jscoverage-node-modules-optimist tar:///usr/local/lib/node_modules/jscoverage/node_modules/optimist
493 verbose lock tar:///usr/local/lib/node_modules/jscoverage/node_modules/optimist /home/roger/.npm/7017c0b3-jscoverage-node-modules-optimist.lock
494 silly lockFile e28b3cfe-r-npm-optimist-0-3-1-package-tgz tar:///home/roger/.npm/optimist/0.3.1/package.tgz
495 verbose lock tar:///home/roger/.npm/optimist/0.3.1/package.tgz /home/roger/.npm/e28b3cfe-r-npm-optimist-0-3-1-package-tgz.lock
496 silly gunzTarPerm modes [ '755', '644' ]
497 silly gunzTarPerm modes [ '755', '644' ]
498 silly gunzTarPerm extractEntry package.json
499 silly gunzTarPerm extractEntry package.json
500 silly gunzTarPerm extractEntry .npmignore
501 silly gunzTarPerm extractEntry uglify-js.js
502 silly gunzTarPerm extractEntry .npmignore
503 silly gunzTarPerm extractEntry LICENSE
504 silly gunzTarPerm extractEntry README.html
505 silly gunzTarPerm extractEntry README.org
506 silly gunzTarPerm extractEntry index.js
507 silly gunzTarPerm extractEntry README.markdown
508 silly gunzTarPerm extractEntry examples/bool.js
509 silly gunzTarPerm extractEntry examples/default_singles.js
510 silly gunzTarPerm extractEntry examples/divide.js
511 silly gunzTarPerm extractEntry examples/line_count.js
512 silly gunzTarPerm extractEntry examples/default_hash.js
513 silly gunzTarPerm extractEntry examples/line_count_wrap.js
514 silly gunzTarPerm extractEntry examples/nonopt.js
515 silly gunzTarPerm extractEntry examples/reflect.js
516 silly gunzTarPerm extractEntry examples/short.js
517 silly gunzTarPerm extractEntry examples/string.js
518 silly gunzTarPerm extractEntry examples/boolean_single.js
519 silly gunzTarPerm extractEntry examples/usage-options.js
520 silly gunzTarPerm extractEntry examples/boolean_double.js
521 silly gunzTarPerm extractEntry examples/xup.js
522 silly gunzTarPerm extractEntry examples/line_count_options.js
523 silly gunzTarPerm extractEntry test/_.js
524 silly gunzTarPerm extractEntry test/parse.js
525 silly gunzTarPerm extractEntry test/usage.js
526 silly gunzTarPerm extractEntry test/_/argv.js
527 silly gunzTarPerm extractEntry test/_/bin.js
528 silly gunzTarPerm extractEntry bin/uglifyjs
529 silly gunzTarPerm extractEntry docstyle.css
530 silly gunzTarPerm extractEntry lib/consolidator.js
531 silly gunzTarPerm extractEntry lib/parse-js.js
532 silly gunzTarPerm extractEntry lib/process.js
533 silly gunzTarPerm extractEntry lib/squeeze-more.js
534 silly gunzTarPerm extractEntry test/beautify.js
535 silly gunzTarPerm extractEntry test/testconsolidator.js
536 silly gunzTarPerm extractEntry test/testparser.js
537 silly gunzTarPerm extractEntry test/unit/scripts.js
538 silly gunzTarPerm extractEntry test/unit/compress/expected/1e21.js
539 silly lockFile 7017c0b3-jscoverage-node-modules-optimist tar:///usr/local/lib/node_modules/jscoverage/node_modules/optimist
540 silly lockFile 7017c0b3-jscoverage-node-modules-optimist tar:///usr/local/lib/node_modules/jscoverage/node_modules/optimist
541 silly lockFile e28b3cfe-r-npm-optimist-0-3-1-package-tgz tar:///home/roger/.npm/optimist/0.3.1/package.tgz
542 silly lockFile e28b3cfe-r-npm-optimist-0-3-1-package-tgz tar:///home/roger/.npm/optimist/0.3.1/package.tgz
543 info preinstall optimist@0.3.1
544 verbose readDependencies using package.json deps
545 verbose readDependencies using package.json deps
546 verbose cache add [ 'wordwrap@>=0.0.1 <0.1.0', null ]
547 verbose cache add name=undefined spec="wordwrap@>=0.0.1 <0.1.0" args=["wordwrap@>=0.0.1 <0.1.0",null]
548 verbose parsed url { protocol: null,
548 verbose parsed url   slashes: null,
548 verbose parsed url   auth: null,
548 verbose parsed url   host: null,
548 verbose parsed url   port: null,
548 verbose parsed url   hostname: null,
548 verbose parsed url   hash: null,
548 verbose parsed url   search: null,
548 verbose parsed url   query: null,
548 verbose parsed url   pathname: 'wordwrap@%3E=0.0.1%20%3C0.1.0',
548 verbose parsed url   path: 'wordwrap@%3E=0.0.1%20%3C0.1.0',
548 verbose parsed url   href: 'wordwrap@%3E=0.0.1%20%3C0.1.0' }
549 verbose cache add name="wordwrap" spec=">=0.0.1 <0.1.0" args=["wordwrap",">=0.0.1 <0.1.0"]
550 verbose parsed url { protocol: null,
550 verbose parsed url   slashes: null,
550 verbose parsed url   auth: null,
550 verbose parsed url   host: null,
550 verbose parsed url   port: null,
550 verbose parsed url   hostname: null,
550 verbose parsed url   hash: null,
550 verbose parsed url   search: null,
550 verbose parsed url   query: null,
550 verbose parsed url   pathname: '%3E=0.0.1%20%3C0.1.0',
550 verbose parsed url   path: '%3E=0.0.1%20%3C0.1.0',
550 verbose parsed url   href: '%3E=0.0.1%20%3C0.1.0' }
551 verbose addNamed [ 'wordwrap', '>=0.0.1 <0.1.0' ]
552 verbose addNamed [ null, '>=0.0.1 <0.1.0-0' ]
553 silly lockFile 1187a5f6-wordwrap-0-0-1-0-1-0 wordwrap@>=0.0.1 <0.1.0
554 verbose lock wordwrap@>=0.0.1 <0.1.0 /home/roger/.npm/1187a5f6-wordwrap-0-0-1-0-1-0.lock
555 silly addNameRange { name: 'wordwrap', range: '>=0.0.1 <0.1.0-0', hasData: false }
556 verbose url raw wordwrap
557 verbose url resolving [ 'https://registry.npmjs.org/', './wordwrap' ]
558 verbose url resolved https://registry.npmjs.org/wordwrap
559 info trying registry request attempt 1 at 04:38:57
560 verbose etag "3HPX5BQ0X4U2A3KJNTK2473OZ"
561 http GET https://registry.npmjs.org/wordwrap
562 silly gunzTarPerm extractEntry test/unit/compress/expected/issue17.js
563 silly gunzTarPerm extractEntry test/unit/compress/expected/issue20.js
564 silly gunzTarPerm extractEntry test/unit/compress/expected/issue21.js
565 silly gunzTarPerm extractEntry test/unit/compress/expected/issue16.js
566 silly gunzTarPerm extractEntry test/unit/compress/expected/issue27.js
567 silly gunzTarPerm extractEntry test/unit/compress/expected/issue278.js
568 silly gunzTarPerm extractEntry test/unit/compress/expected/issue28.js
569 silly gunzTarPerm extractEntry test/unit/compress/expected/issue29.js
570 silly gunzTarPerm extractEntry test/unit/compress/expected/issue30.js
571 silly gunzTarPerm extractEntry test/unit/compress/expected/issue14.js
572 silly gunzTarPerm extractEntry test/unit/compress/expected/issue34.js
573 silly gunzTarPerm extractEntry test/unit/compress/expected/issue13.js
574 silly gunzTarPerm extractEntry test/unit/compress/expected/issue349.js
575 silly gunzTarPerm extractEntry test/unit/compress/expected/issue11.js
576 silly gunzTarPerm extractEntry test/unit/compress/expected/issue353.js
577 silly gunzTarPerm extractEntry test/unit/compress/expected/issue10.js
578 silly gunzTarPerm extractEntry test/unit/compress/expected/issue372.js
579 silly gunzTarPerm extractEntry test/unit/compress/expected/infinite.js
580 silly gunzTarPerm extractEntry test/unit/compress/expected/issue4.js
581 silly gunzTarPerm extractEntry test/unit/compress/expected/ifreturn2.js
582 silly gunzTarPerm extractEntry test/unit/compress/expected/issue48.js
583 silly gunzTarPerm extractEntry test/unit/compress/expected/ifreturn.js
584 silly gunzTarPerm extractEntry test/unit/compress/expected/issue50.js
585 silly gunzTarPerm extractEntry test/unit/compress/expected/if.js
586 silly gunzTarPerm extractEntry test/unit/compress/expected/issue53.js
587 silly gunzTarPerm extractEntry test/unit/compress/expected/if-not.js
588 silly gunzTarPerm extractEntry test/unit/compress/expected/issue54.1.js
589 silly gunzTarPerm extractEntry test/unit/compress/expected/forstatement.js
590 silly gunzTarPerm extractEntry test/unit/compress/expected/issue68.js
591 silly gunzTarPerm extractEntry test/unit/compress/expected/empty-blocks.js
592 silly gunzTarPerm extractEntry test/unit/compress/expected/issue69.js
593 silly gunzTarPerm extractEntry test/unit/compress/expected/div-with-regexp.js
594 silly gunzTarPerm extractEntry test/unit/compress/expected/issue9.js
595 silly gunzTarPerm extractEntry test/unit/compress/expected/const.js
596 silly gunzTarPerm extractEntry test/unit/compress/expected/issues222_324.js
597 silly gunzTarPerm extractEntry test/unit/compress/expected/concatstring.js
598 silly gunzTarPerm extractEntry test/unit/compress/expected/mangle.js
599 silly gunzTarPerm extractEntry test/unit/compress/expected/assignment.js
600 silly gunzTarPerm extractEntry test/unit/compress/expected/null_string.js
601 silly gunzTarPerm extractEntry test/unit/compress/expected/array4.js
602 silly gunzTarPerm extractEntry test/unit/compress/expected/strict-equals.js
603 silly gunzTarPerm extractEntry test/unit/compress/expected/array3.js
604 silly gunzTarPerm extractEntry test/unit/compress/expected/var.js
605 silly gunzTarPerm extractEntry test/unit/compress/expected/array2.js
606 silly gunzTarPerm extractEntry test/unit/compress/expected/whitespace.js
607 silly gunzTarPerm extractEntry test/unit/compress/expected/array1.js
608 silly gunzTarPerm extractEntry test/unit/compress/expected/with.js
609 silly gunzTarPerm extractEntry test/unit/compress/expected/issue25.js
610 silly gunzTarPerm extractEntry test/unit/compress/test/1e21.js
611 silly gunzTarPerm extractEntry test/unit/compress/test/issue17.js
612 silly gunzTarPerm extractEntry test/unit/compress/test/issue20.js
613 silly gunzTarPerm extractEntry test/unit/compress/test/issue21.js
614 silly gunzTarPerm extractEntry test/unit/compress/test/issue16.js
615 silly gunzTarPerm extractEntry test/unit/compress/test/issue27.js
616 silly gunzTarPerm extractEntry test/unit/compress/test/issue278.js
617 silly gunzTarPerm extractEntry test/unit/compress/test/issue28.js
618 silly gunzTarPerm extractEntry test/unit/compress/test/issue29.js
619 silly gunzTarPerm extractEntry test/unit/compress/test/issue30.js
620 silly gunzTarPerm extractEntry test/unit/compress/test/issue14.js
621 silly gunzTarPerm extractEntry test/unit/compress/test/issue34.js
622 silly gunzTarPerm extractEntry test/unit/compress/test/issue13.js
623 silly gunzTarPerm extractEntry test/unit/compress/test/issue349.js
624 silly gunzTarPerm extractEntry test/unit/compress/test/issue11.js
625 silly gunzTarPerm extractEntry test/unit/compress/test/issue353.js
626 silly gunzTarPerm extractEntry test/unit/compress/test/issue10.js
627 silly gunzTarPerm extractEntry test/unit/compress/test/issue372.js
628 silly gunzTarPerm extractEntry test/unit/compress/test/infinite.js
629 silly gunzTarPerm extractEntry test/unit/compress/test/issue4.js
630 silly gunzTarPerm extractEntry test/unit/compress/test/ifreturn2.js
631 silly gunzTarPerm extractEntry test/unit/compress/test/issue48.js
632 silly gunzTarPerm extractEntry test/unit/compress/test/ifreturn.js
633 silly gunzTarPerm extractEntry test/unit/compress/test/issue50.js
634 silly gunzTarPerm extractEntry test/unit/compress/test/if.js
635 silly gunzTarPerm extractEntry test/unit/compress/test/issue53.js
636 silly gunzTarPerm extractEntry test/unit/compress/test/if-not.js
637 silly gunzTarPerm extractEntry test/unit/compress/test/issue54.1.js
638 silly gunzTarPerm extractEntry test/unit/compress/test/forstatement.js
639 silly gunzTarPerm extractEntry test/unit/compress/test/issue68.js
640 silly gunzTarPerm extractEntry test/unit/compress/test/empty-blocks.js
641 silly gunzTarPerm extractEntry test/unit/compress/test/issue69.js
642 silly gunzTarPerm extractEntry test/unit/compress/test/div-with-regexp.js
643 silly gunzTarPerm extractEntry test/unit/compress/test/issue9.js
644 silly gunzTarPerm extractEntry test/unit/compress/test/const.js
645 silly gunzTarPerm extractEntry test/unit/compress/test/issues222_324.js
646 silly gunzTarPerm extractEntry test/unit/compress/test/concatstring.js
647 silly gunzTarPerm extractEntry test/unit/compress/test/mangle.js
648 silly gunzTarPerm extractEntry test/unit/compress/test/assignment.js
649 silly gunzTarPerm extractEntry test/unit/compress/test/null_string.js
650 silly gunzTarPerm extractEntry test/unit/compress/test/array4.js
651 silly gunzTarPerm extractEntry test/unit/compress/test/strict-equals.js
652 silly gunzTarPerm extractEntry test/unit/compress/test/array3.js
653 silly gunzTarPerm extractEntry test/unit/compress/test/var.js
654 silly gunzTarPerm extractEntry test/unit/compress/test/array2.js
655 silly gunzTarPerm extractEntry test/unit/compress/test/whitespace.js
656 silly gunzTarPerm extractEntry test/unit/compress/test/array1.js
657 silly gunzTarPerm extractEntry test/unit/compress/test/with.js
658 silly gunzTarPerm extractEntry test/unit/compress/test/issue25.js
659 silly gunzTarPerm extractEntry tmp/hoist.js
660 silly gunzTarPerm extractEntry tmp/instrument.js
661 silly gunzTarPerm extractEntry tmp/test.js
662 silly lockFile c7a3e64e-scoverage-node-modules-uglify-js tar:///usr/local/lib/node_modules/jscoverage/node_modules/uglify-js
663 silly lockFile c7a3e64e-scoverage-node-modules-uglify-js tar:///usr/local/lib/node_modules/jscoverage/node_modules/uglify-js
664 silly lockFile f4139750--npm-uglify-js-1-3-4-package-tgz tar:///home/roger/.npm/uglify-js/1.3.4/package.tgz
665 silly lockFile f4139750--npm-uglify-js-1-3-4-package-tgz tar:///home/roger/.npm/uglify-js/1.3.4/package.tgz
666 info preinstall uglify-js@1.3.4
667 verbose readDependencies using package.json deps
668 verbose readDependencies using package.json deps
669 silly resolved []
670 verbose about to build /usr/local/lib/node_modules/jscoverage/node_modules/uglify-js
671 info build /usr/local/lib/node_modules/jscoverage/node_modules/uglify-js
672 verbose linkStuff [ true,
672 verbose linkStuff   '/usr/local/lib/node_modules',
672 verbose linkStuff   false,
672 verbose linkStuff   '/usr/local/lib/node_modules/jscoverage/node_modules' ]
673 info linkStuff uglify-js@1.3.4
674 verbose linkBins uglify-js@1.3.4
675 verbose link bins [ { uglifyjs: './bin/uglifyjs' },
675 verbose link bins   '/usr/local/lib/node_modules/jscoverage/node_modules/.bin',
675 verbose link bins   false ]
676 verbose linkMans uglify-js@1.3.4
677 verbose rebuildBundles uglify-js@1.3.4
678 info install uglify-js@1.3.4
679 info postinstall uglify-js@1.3.4
680 http 304 https://registry.npmjs.org/wordwrap
681 silly registry.get cb [ 304,
681 silly registry.get   { server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
681 silly registry.get     etag: '"3HPX5BQ0X4U2A3KJNTK2473OZ"',
681 silly registry.get     date: 'Wed, 27 Nov 2013 07:38:57 GMT',
681 silly registry.get     'content-length': '0' } ]
682 verbose etag wordwrap from cache
683 silly addNameRange number 2 { name: 'wordwrap', range: '>=0.0.1 <0.1.0-0', hasData: true }
684 silly addNameRange versions [ 'wordwrap', [ '0.0.1', '0.0.2' ] ]
685 verbose addNamed [ 'wordwrap', '0.0.2' ]
686 verbose addNamed [ '0.0.2', '0.0.2' ]
687 silly lockFile 24a694c8-wordwrap-0-0-2 wordwrap@0.0.2
688 verbose lock wordwrap@0.0.2 /home/roger/.npm/24a694c8-wordwrap-0-0-2.lock
689 silly lockFile 24a694c8-wordwrap-0-0-2 wordwrap@0.0.2
690 silly lockFile 24a694c8-wordwrap-0-0-2 wordwrap@0.0.2
691 silly lockFile 1187a5f6-wordwrap-0-0-1-0-1-0 wordwrap@>=0.0.1 <0.1.0
692 silly lockFile 1187a5f6-wordwrap-0-0-1-0-1-0 wordwrap@>=0.0.1 <0.1.0
693 silly resolved [ { name: 'wordwrap',
693 silly resolved     description: 'Wrap those words. Show them at what columns to start and stop.',
693 silly resolved     version: '0.0.2',
693 silly resolved     repository:
693 silly resolved      { type: 'git',
693 silly resolved        url: 'git://github.com/substack/node-wordwrap.git' },
693 silly resolved     main: './index.js',
693 silly resolved     keywords: [ 'word', 'wrap', 'rule', 'format', 'column' ],
693 silly resolved     directories: { lib: '.', example: 'example', test: 'test' },
693 silly resolved     scripts: { test: 'expresso' },
693 silly resolved     devDependencies: { expresso: '=0.7.x' },
693 silly resolved     engines: { node: '>=0.4.0' },
693 silly resolved     license: 'MIT/X11',
693 silly resolved     author:
693 silly resolved      { name: 'James Halliday',
693 silly resolved        email: 'mail@substack.net',
693 silly resolved        url: 'http://substack.net' },
693 silly resolved     readme: 'wordwrap\n========\n\nWrap your words.\n\nexample\n=======\n\nmade out of meat\n----------------\n\nmeat.js\n\n    var wrap = require(\'wordwrap\')(15);\n    console.log(wrap(\'You and your whole family are made out of meat.\'));\n\noutput:\n\n    You and your\n    whole family\n    are made out\n    of meat.\n\ncentered\n--------\n\ncenter.js\n\n    var wrap = require(\'wordwrap\')(20, 60);\n    console.log(wrap(\n        \'At long last the struggle and tumult was over.\'\n        + \' The machines had finally cast off their oppressors\'\n        + \' and were finally free to roam the cosmos.\'\n        + \'\\n\'\n        + \'Free of purpose, free of obligation.\'\n        + \' Just drifting through emptiness.\'\n        + \' The sun was just another point of light.\'\n    ));\n\noutput:\n\n                        At long last the struggle and tumult\n                        was over. The machines had finally cast\n                        off their oppressors and were finally\n                        free to roam the cosmos.\n                        Free of purpose, free of obligation.\n                        Just drifting through emptiness. The\n                        sun was just another point of light.\n\nmethods\n=======\n\nvar wrap = require(\'wordwrap\');\n\nwrap(stop), wrap(start, stop, params={mode:"soft"})\n---------------------------------------------------\n\nReturns a function that takes a string and returns a new string.\n\nPad out lines with spaces out to column `start` and then wrap until column\n`stop`. If a word is longer than `stop - start` characters it will overflow.\n\nIn "soft" mode, split chunks by `/(\\S+\\s+/` and don\'t break up chunks which are\nlonger than `stop - start`, in "hard" mode, split chunks with `/\\b/` and break\nup chunks longer than `stop - start`.\n\nwrap.hard(start, stop)\n----------------------\n\nLike `wrap()` but with `params.mode = "hard"`.\n',
693 silly resolved     readmeFilename: 'README.markdown',
693 silly resolved     bugs: { url: 'https://github.com/substack/node-wordwrap/issues' },
693 silly resolved     homepage: 'https://github.com/substack/node-wordwrap',
693 silly resolved     _id: 'wordwrap@0.0.2',
693 silly resolved     _from: 'wordwrap@>=0.0.1 <0.1.0' } ]
694 info install wordwrap@0.0.2 into /usr/local/lib/node_modules/jscoverage/node_modules/optimist
695 info installOne wordwrap@0.0.2
696 info /usr/local/lib/node_modules/jscoverage/node_modules/optimist/node_modules/wordwrap unbuild
697 verbose tar unpack /home/roger/.npm/wordwrap/0.0.2/package.tgz
698 silly lockFile 8320046e-s-optimist-node-modules-wordwrap tar:///usr/local/lib/node_modules/jscoverage/node_modules/optimist/node_modules/wordwrap
699 verbose lock tar:///usr/local/lib/node_modules/jscoverage/node_modules/optimist/node_modules/wordwrap /home/roger/.npm/8320046e-s-optimist-node-modules-wordwrap.lock
700 silly lockFile ffc50f48-r-npm-wordwrap-0-0-2-package-tgz tar:///home/roger/.npm/wordwrap/0.0.2/package.tgz
701 verbose lock tar:///home/roger/.npm/wordwrap/0.0.2/package.tgz /home/roger/.npm/ffc50f48-r-npm-wordwrap-0-0-2-package-tgz.lock
702 silly gunzTarPerm modes [ '755', '644' ]
703 silly gunzTarPerm extractEntry package.json
704 silly gunzTarPerm extractEntry .npmignore
705 silly gunzTarPerm extractEntry index.js
706 silly gunzTarPerm extractEntry README.markdown
707 silly gunzTarPerm extractEntry example/center.js
708 silly gunzTarPerm extractEntry example/meat.js
709 silly gunzTarPerm extractEntry test/break.js
710 silly gunzTarPerm extractEntry test/wrap.js
711 silly gunzTarPerm extractEntry test/idleness.txt
712 silly lockFile 8320046e-s-optimist-node-modules-wordwrap tar:///usr/local/lib/node_modules/jscoverage/node_modules/optimist/node_modules/wordwrap
713 silly lockFile 8320046e-s-optimist-node-modules-wordwrap tar:///usr/local/lib/node_modules/jscoverage/node_modules/optimist/node_modules/wordwrap
714 silly lockFile ffc50f48-r-npm-wordwrap-0-0-2-package-tgz tar:///home/roger/.npm/wordwrap/0.0.2/package.tgz
715 silly lockFile ffc50f48-r-npm-wordwrap-0-0-2-package-tgz tar:///home/roger/.npm/wordwrap/0.0.2/package.tgz
716 info preinstall wordwrap@0.0.2
717 verbose readDependencies using package.json deps
718 verbose readDependencies using package.json deps
719 silly resolved []
720 verbose about to build /usr/local/lib/node_modules/jscoverage/node_modules/optimist/node_modules/wordwrap
721 info build /usr/local/lib/node_modules/jscoverage/node_modules/optimist/node_modules/wordwrap
722 verbose linkStuff [ true,
722 verbose linkStuff   '/usr/local/lib/node_modules',
722 verbose linkStuff   false,
722 verbose linkStuff   '/usr/local/lib/node_modules/jscoverage/node_modules/optimist/node_modules' ]
723 info linkStuff wordwrap@0.0.2
724 verbose linkBins wordwrap@0.0.2
725 verbose linkMans wordwrap@0.0.2
726 verbose rebuildBundles wordwrap@0.0.2
727 info install wordwrap@0.0.2
728 info postinstall wordwrap@0.0.2
729 verbose about to build /usr/local/lib/node_modules/jscoverage/node_modules/optimist
730 info build /usr/local/lib/node_modules/jscoverage/node_modules/optimist
731 verbose linkStuff [ true,
731 verbose linkStuff   '/usr/local/lib/node_modules',
731 verbose linkStuff   false,
731 verbose linkStuff   '/usr/local/lib/node_modules/jscoverage/node_modules' ]
732 info linkStuff optimist@0.3.1
733 verbose linkBins optimist@0.3.1
734 verbose linkMans optimist@0.3.1
735 verbose rebuildBundles optimist@0.3.1
736 verbose rebuildBundles [ 'wordwrap' ]
737 info install optimist@0.3.1
738 info postinstall optimist@0.3.1
739 verbose about to build /usr/local/lib/node_modules/jscoverage
740 info build /usr/local/lib/node_modules/jscoverage
741 verbose linkStuff [ true,
741 verbose linkStuff   '/usr/local/lib/node_modules',
741 verbose linkStuff   true,
741 verbose linkStuff   '/usr/local/lib/node_modules' ]
742 info linkStuff jscoverage@0.3.8
743 verbose linkBins jscoverage@0.3.8
744 verbose link bins [ { jscoverage: './bin/jscoverage' }, '/usr/local/bin', true ]
745 verbose linkMans jscoverage@0.3.8
746 verbose rebuildBundles jscoverage@0.3.8
747 verbose rebuildBundles [ '.bin', 'optimist', 'uglify-js' ]
748 info /usr/local/lib/node_modules/jscoverage unbuild
749 info preuninstall jscoverage@0.3.8
750 info uninstall jscoverage@0.3.8
751 verbose true,/usr/local/lib/node_modules,/usr/local/lib/node_modules unbuild jscoverage@0.3.8
752 verbose /usr/local/bin,[object Object] binRoot
753 info postuninstall jscoverage@0.3.8
754 error Refusing to delete: /usr/local/bin/jscoverage not in /usr/local/lib/node_modules/jscoverage
File exists: /usr/local/bin/jscoverage
Move it away, and try again.
755 error System Linux 3.11.0-13-generic
756 error command "/usr/local/bin/node" "/usr/local/bin/npm" "install" "jscoverage" "-g"
757 error cwd /home/roger/Documents/Buse
758 error node -v v0.10.22
759 error npm -v 1.3.14
760 error path /usr/local/bin/jscoverage
761 error code EEXIST
762 verbose exit [ 1, true ]
